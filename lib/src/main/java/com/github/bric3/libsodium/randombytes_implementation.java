// Generated by jextract

package com.github.bric3.libsodium;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class randombytes_implementation {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("implementation_name"),
        Constants$root.C_POINTER$LAYOUT.withName("random"),
        Constants$root.C_POINTER$LAYOUT.withName("stir"),
        Constants$root.C_POINTER$LAYOUT.withName("uniform"),
        Constants$root.C_POINTER$LAYOUT.withName("buf"),
        Constants$root.C_POINTER$LAYOUT.withName("close")
    ).withName("randombytes_implementation");
    public static MemoryLayout $LAYOUT() {
        return randombytes_implementation.$struct$LAYOUT;
    }
    static final FunctionDescriptor implementation_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle implementation_name$MH = RuntimeHelper.downcallHandle(
        randombytes_implementation.implementation_name$FUNC, false
    );
    public interface implementation_name {

        jdk.incubator.foreign.Addressable apply();
        static NativeSymbol allocate(implementation_name fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(implementation_name.class, fi, randombytes_implementation.implementation_name$FUNC, "()Ljdk/incubator/foreign/Addressable;", scope);
        }
        static implementation_name ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("implementation_name::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)randombytes_implementation.implementation_name$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle implementation_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("implementation_name"));
    public static VarHandle implementation_name$VH() {
        return randombytes_implementation.implementation_name$VH;
    }
    public static MemoryAddress implementation_name$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.implementation_name$VH.get(seg);
    }
    public static void implementation_name$set( MemorySegment seg, MemoryAddress x) {
        randombytes_implementation.implementation_name$VH.set(seg, x);
    }
    public static MemoryAddress implementation_name$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.implementation_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void implementation_name$set(MemorySegment seg, long index, MemoryAddress x) {
        randombytes_implementation.implementation_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static implementation_name implementation_name (MemorySegment segment, ResourceScope scope) {
        return implementation_name.ofAddress(implementation_name$get(segment), scope);
    }
    static final FunctionDescriptor random$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle random$MH = RuntimeHelper.downcallHandle(
        randombytes_implementation.random$FUNC, false
    );
    public interface random {

        int apply();
        static NativeSymbol allocate(random fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(random.class, fi, randombytes_implementation.random$FUNC, "()I", scope);
        }
        static random ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("random::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    return (int)randombytes_implementation.random$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle random$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("random"));
    public static VarHandle random$VH() {
        return randombytes_implementation.random$VH;
    }
    public static MemoryAddress random$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.random$VH.get(seg);
    }
    public static void random$set( MemorySegment seg, MemoryAddress x) {
        randombytes_implementation.random$VH.set(seg, x);
    }
    public static MemoryAddress random$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.random$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void random$set(MemorySegment seg, long index, MemoryAddress x) {
        randombytes_implementation.random$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static random random (MemorySegment segment, ResourceScope scope) {
        return random.ofAddress(random$get(segment), scope);
    }
    static final FunctionDescriptor stir$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle stir$MH = RuntimeHelper.downcallHandle(
        randombytes_implementation.stir$FUNC, false
    );
    public interface stir {

        void apply();
        static NativeSymbol allocate(stir fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(stir.class, fi, randombytes_implementation.stir$FUNC, "()V", scope);
        }
        static stir ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("stir::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    randombytes_implementation.stir$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle stir$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stir"));
    public static VarHandle stir$VH() {
        return randombytes_implementation.stir$VH;
    }
    public static MemoryAddress stir$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.stir$VH.get(seg);
    }
    public static void stir$set( MemorySegment seg, MemoryAddress x) {
        randombytes_implementation.stir$VH.set(seg, x);
    }
    public static MemoryAddress stir$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.stir$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stir$set(MemorySegment seg, long index, MemoryAddress x) {
        randombytes_implementation.stir$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static stir stir (MemorySegment segment, ResourceScope scope) {
        return stir.ofAddress(stir$get(segment), scope);
    }
    static final FunctionDescriptor uniform$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle uniform$MH = RuntimeHelper.downcallHandle(
        randombytes_implementation.uniform$FUNC, false
    );
    public interface uniform {

        int apply(int _x0);
        static NativeSymbol allocate(uniform fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(uniform.class, fi, randombytes_implementation.uniform$FUNC, "(I)I", scope);
        }
        static uniform ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("uniform::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int _x0) -> {
                try {
                    return (int)randombytes_implementation.uniform$MH.invokeExact(symbol, _x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle uniform$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uniform"));
    public static VarHandle uniform$VH() {
        return randombytes_implementation.uniform$VH;
    }
    public static MemoryAddress uniform$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.uniform$VH.get(seg);
    }
    public static void uniform$set( MemorySegment seg, MemoryAddress x) {
        randombytes_implementation.uniform$VH.set(seg, x);
    }
    public static MemoryAddress uniform$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.uniform$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uniform$set(MemorySegment seg, long index, MemoryAddress x) {
        randombytes_implementation.uniform$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static uniform uniform (MemorySegment segment, ResourceScope scope) {
        return uniform.ofAddress(uniform$get(segment), scope);
    }
    static final FunctionDescriptor buf$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle buf$MH = RuntimeHelper.downcallHandle(
        randombytes_implementation.buf$FUNC, false
    );
    public interface buf {

        void apply(jdk.incubator.foreign.MemoryAddress _x0, long _x1);
        static NativeSymbol allocate(buf fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(buf.class, fi, randombytes_implementation.buf$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;J)V", scope);
        }
        static buf ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("buf::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress _x0, long _x1) -> {
                try {
                    randombytes_implementation.buf$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)_x0, _x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle buf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buf"));
    public static VarHandle buf$VH() {
        return randombytes_implementation.buf$VH;
    }
    public static MemoryAddress buf$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.buf$VH.get(seg);
    }
    public static void buf$set( MemorySegment seg, MemoryAddress x) {
        randombytes_implementation.buf$VH.set(seg, x);
    }
    public static MemoryAddress buf$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.buf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buf$set(MemorySegment seg, long index, MemoryAddress x) {
        randombytes_implementation.buf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static buf buf (MemorySegment segment, ResourceScope scope) {
        return buf.ofAddress(buf$get(segment), scope);
    }
    static final FunctionDescriptor close$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle close$MH = RuntimeHelper.downcallHandle(
        randombytes_implementation.close$FUNC, false
    );
    public interface close {

        int apply();
        static NativeSymbol allocate(close fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(close.class, fi, randombytes_implementation.close$FUNC, "()I", scope);
        }
        static close ofAddress(MemoryAddress addr, ResourceScope scope) {
            NativeSymbol symbol = NativeSymbol.ofAddress("close::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return () -> {
                try {
                    return (int)randombytes_implementation.close$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close"));
    public static VarHandle close$VH() {
        return randombytes_implementation.close$VH;
    }
    public static MemoryAddress close$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.close$VH.get(seg);
    }
    public static void close$set( MemorySegment seg, MemoryAddress x) {
        randombytes_implementation.close$VH.set(seg, x);
    }
    public static MemoryAddress close$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)randombytes_implementation.close$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemoryAddress x) {
        randombytes_implementation.close$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close close (MemorySegment segment, ResourceScope scope) {
        return close.ofAddress(close$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


