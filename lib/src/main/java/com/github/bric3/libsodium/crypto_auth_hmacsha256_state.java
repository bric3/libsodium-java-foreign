// Generated by jextract

package com.github.bric3.libsodium;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class crypto_auth_hmacsha256_state {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(8, C_INT).withName("state"),
            C_LONG_LONG.withName("count"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("buf")
        ).withName("ictx"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(8, C_INT).withName("state"),
            C_LONG_LONG.withName("count"),
            MemoryLayout.sequenceLayout(64, C_CHAR).withName("buf")
        ).withName("octx")
    ).withName("crypto_auth_hmacsha256_state");
    public static MemoryLayout $LAYOUT() {
        return crypto_auth_hmacsha256_state.$struct$LAYOUT;
    }
    public static MemorySegment ictx$slice(MemorySegment seg) {
        return seg.asSlice(0, 104);
    }
    public static MemorySegment octx$slice(MemorySegment seg) {
        return seg.asSlice(104, 104);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


