// Generated by jextract

package com.github.bric3.sodium;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.util.Objects;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class sodium_h_0 {

    /* package-private */ sodium_h_0() {}
    public static void sodium_free ( Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_free$MH(), "unresolved symbol: sodium_free");
        try {
            mh$.invokeExact(ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle sodium_mprotect_noaccess$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_mprotect_noaccess$MH(),"unresolved symbol: sodium_mprotect_noaccess");
    }
    public static int sodium_mprotect_noaccess ( Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_mprotect_noaccess$MH(), "unresolved symbol: sodium_mprotect_noaccess");
        try {
            return (int)mh$.invokeExact(ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle sodium_mprotect_readonly$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_mprotect_readonly$MH(),"unresolved symbol: sodium_mprotect_readonly");
    }
    public static int sodium_mprotect_readonly ( Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_mprotect_readonly$MH(), "unresolved symbol: sodium_mprotect_readonly");
        try {
            return (int)mh$.invokeExact(ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle sodium_mprotect_readwrite$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_mprotect_readwrite$MH(),"unresolved symbol: sodium_mprotect_readwrite");
    }
    public static int sodium_mprotect_readwrite ( Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_mprotect_readwrite$MH(), "unresolved symbol: sodium_mprotect_readwrite");
        try {
            return (int)mh$.invokeExact(ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle sodium_pad$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_pad$MH(),"unresolved symbol: sodium_pad");
    }
    public static int sodium_pad ( Addressable padded_buflen_p,  Addressable buf,  long unpadded_buflen,  long blocksize,  long max_buflen) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_pad$MH(), "unresolved symbol: sodium_pad");
        try {
            return (int)mh$.invokeExact(padded_buflen_p.address(), buf.address(), unpadded_buflen, blocksize, max_buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle sodium_unpad$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_unpad$MH(),"unresolved symbol: sodium_unpad");
    }
    public static int sodium_unpad ( Addressable unpadded_buflen_p,  Addressable buf,  long padded_buflen,  long blocksize) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.sodium_unpad$MH(), "unresolved symbol: sodium_unpad");
        try {
            return (int)mh$.invokeExact(unpadded_buflen_p.address(), buf.address(), padded_buflen, blocksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle _sodium_alloc_init$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1._sodium_alloc_init$MH(),"unresolved symbol: _sodium_alloc_init");
    }
    public static int _sodium_alloc_init () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1._sodium_alloc_init$MH(), "unresolved symbol: _sodium_alloc_init");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_xchacha20_keybytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_keybytes$MH(),"unresolved symbol: crypto_stream_xchacha20_keybytes");
    }
    public static long crypto_stream_xchacha20_keybytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_keybytes$MH(), "unresolved symbol: crypto_stream_xchacha20_keybytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_xchacha20_noncebytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_noncebytes$MH(),"unresolved symbol: crypto_stream_xchacha20_noncebytes");
    }
    public static long crypto_stream_xchacha20_noncebytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_noncebytes$MH(), "unresolved symbol: crypto_stream_xchacha20_noncebytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_xchacha20_messagebytes_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_messagebytes_max$MH(),"unresolved symbol: crypto_stream_xchacha20_messagebytes_max");
    }
    public static long crypto_stream_xchacha20_messagebytes_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_messagebytes_max$MH(), "unresolved symbol: crypto_stream_xchacha20_messagebytes_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_xchacha20$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20$MH(),"unresolved symbol: crypto_stream_xchacha20");
    }
    public static int crypto_stream_xchacha20 ( Addressable c,  long clen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20$MH(), "unresolved symbol: crypto_stream_xchacha20");
        try {
            return (int)mh$.invokeExact(c.address(), clen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_xchacha20_xor$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_xor$MH(),"unresolved symbol: crypto_stream_xchacha20_xor");
    }
    public static int crypto_stream_xchacha20_xor ( Addressable c,  Addressable m,  long mlen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_xor$MH(), "unresolved symbol: crypto_stream_xchacha20_xor");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_xchacha20_xor_ic$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_xor_ic$MH(),"unresolved symbol: crypto_stream_xchacha20_xor_ic");
    }
    public static int crypto_stream_xchacha20_xor_ic ( Addressable c,  Addressable m,  long mlen,  Addressable n,  long ic,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_xor_ic$MH(), "unresolved symbol: crypto_stream_xchacha20_xor_ic");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, n.address(), ic, k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_xchacha20_keygen$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_keygen$MH(),"unresolved symbol: crypto_stream_xchacha20_keygen");
    }
    public static void crypto_stream_xchacha20_keygen ( Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_xchacha20_keygen$MH(), "unresolved symbol: crypto_stream_xchacha20_keygen");
        try {
            mh$.invokeExact(k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_seedbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seedbytes$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_seedbytes");
    }
    public static long crypto_box_curve25519xchacha20poly1305_seedbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seedbytes$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_seedbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_publickeybytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_publickeybytes$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_publickeybytes");
    }
    public static long crypto_box_curve25519xchacha20poly1305_publickeybytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_publickeybytes$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_publickeybytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_secretkeybytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_secretkeybytes$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_secretkeybytes");
    }
    public static long crypto_box_curve25519xchacha20poly1305_secretkeybytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_secretkeybytes$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_secretkeybytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_beforenmbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_beforenmbytes$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_beforenmbytes");
    }
    public static long crypto_box_curve25519xchacha20poly1305_beforenmbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_beforenmbytes$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_beforenmbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_noncebytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_noncebytes$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_noncebytes");
    }
    public static long crypto_box_curve25519xchacha20poly1305_noncebytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_noncebytes$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_noncebytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_macbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_macbytes$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_macbytes");
    }
    public static long crypto_box_curve25519xchacha20poly1305_macbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_macbytes$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_macbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_messagebytes_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_messagebytes_max$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_messagebytes_max");
    }
    public static long crypto_box_curve25519xchacha20poly1305_messagebytes_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_messagebytes_max$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_messagebytes_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_seed_keypair$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seed_keypair$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_seed_keypair");
    }
    public static int crypto_box_curve25519xchacha20poly1305_seed_keypair ( Addressable pk,  Addressable sk,  Addressable seed) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seed_keypair$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_seed_keypair");
        try {
            return (int)mh$.invokeExact(pk.address(), sk.address(), seed.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_keypair$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_keypair$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_keypair");
    }
    public static int crypto_box_curve25519xchacha20poly1305_keypair ( Addressable pk,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_keypair$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_keypair");
        try {
            return (int)mh$.invokeExact(pk.address(), sk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_easy$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_easy$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_easy");
    }
    public static int crypto_box_curve25519xchacha20poly1305_easy ( Addressable c,  Addressable m,  long mlen,  Addressable n,  Addressable pk,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_easy$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_easy");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, n.address(), pk.address(), sk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_open_easy$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_easy$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_easy");
    }
    public static int crypto_box_curve25519xchacha20poly1305_open_easy ( Addressable m,  Addressable c,  long clen,  Addressable n,  Addressable pk,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_easy$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_easy");
        try {
            return (int)mh$.invokeExact(m.address(), c.address(), clen, n.address(), pk.address(), sk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_detached$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_detached$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_detached");
    }
    public static int crypto_box_curve25519xchacha20poly1305_detached ( Addressable c,  Addressable mac,  Addressable m,  long mlen,  Addressable n,  Addressable pk,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_detached$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_detached");
        try {
            return (int)mh$.invokeExact(c.address(), mac.address(), m.address(), mlen, n.address(), pk.address(), sk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_open_detached$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_detached$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_detached");
    }
    public static int crypto_box_curve25519xchacha20poly1305_open_detached ( Addressable m,  Addressable c,  Addressable mac,  long clen,  Addressable n,  Addressable pk,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_detached$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_detached");
        try {
            return (int)mh$.invokeExact(m.address(), c.address(), mac.address(), clen, n.address(), pk.address(), sk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_beforenm$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_beforenm$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_beforenm");
    }
    public static int crypto_box_curve25519xchacha20poly1305_beforenm ( Addressable k,  Addressable pk,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_beforenm$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_beforenm");
        try {
            return (int)mh$.invokeExact(k.address(), pk.address(), sk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_easy_afternm$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_easy_afternm$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_easy_afternm");
    }
    public static int crypto_box_curve25519xchacha20poly1305_easy_afternm ( Addressable c,  Addressable m,  long mlen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_easy_afternm$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_easy_afternm");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_open_easy_afternm$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_easy_afternm$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_easy_afternm");
    }
    public static int crypto_box_curve25519xchacha20poly1305_open_easy_afternm ( Addressable m,  Addressable c,  long clen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_easy_afternm$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_easy_afternm");
        try {
            return (int)mh$.invokeExact(m.address(), c.address(), clen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_detached_afternm$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_detached_afternm$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_detached_afternm");
    }
    public static int crypto_box_curve25519xchacha20poly1305_detached_afternm ( Addressable c,  Addressable mac,  Addressable m,  long mlen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_detached_afternm$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_detached_afternm");
        try {
            return (int)mh$.invokeExact(c.address(), mac.address(), m.address(), mlen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_open_detached_afternm$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_detached_afternm$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_detached_afternm");
    }
    public static int crypto_box_curve25519xchacha20poly1305_open_detached_afternm ( Addressable m,  Addressable c,  Addressable mac,  long clen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_open_detached_afternm$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_open_detached_afternm");
        try {
            return (int)mh$.invokeExact(m.address(), c.address(), mac.address(), clen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_sealbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_sealbytes$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_sealbytes");
    }
    public static long crypto_box_curve25519xchacha20poly1305_sealbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_sealbytes$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_sealbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_seal$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seal$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_seal");
    }
    public static int crypto_box_curve25519xchacha20poly1305_seal ( Addressable c,  Addressable m,  long mlen,  Addressable pk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seal$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_seal");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, pk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_box_curve25519xchacha20poly1305_seal_open$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seal_open$MH(),"unresolved symbol: crypto_box_curve25519xchacha20poly1305_seal_open");
    }
    public static int crypto_box_curve25519xchacha20poly1305_seal_open ( Addressable m,  Addressable c,  long clen,  Addressable pk,  Addressable sk) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_seal_open$MH(), "unresolved symbol: crypto_box_curve25519xchacha20poly1305_seal_open");
        try {
            return (int)mh$.invokeExact(m.address(), c.address(), clen, pk.address(), sk.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_bytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_bytes$MH(),"unresolved symbol: crypto_core_ed25519_bytes");
    }
    public static long crypto_core_ed25519_bytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_bytes$MH(), "unresolved symbol: crypto_core_ed25519_bytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_uniformbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_uniformbytes$MH(),"unresolved symbol: crypto_core_ed25519_uniformbytes");
    }
    public static long crypto_core_ed25519_uniformbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_uniformbytes$MH(), "unresolved symbol: crypto_core_ed25519_uniformbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_hashbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_hashbytes$MH(),"unresolved symbol: crypto_core_ed25519_hashbytes");
    }
    public static long crypto_core_ed25519_hashbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_hashbytes$MH(), "unresolved symbol: crypto_core_ed25519_hashbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalarbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalarbytes$MH(),"unresolved symbol: crypto_core_ed25519_scalarbytes");
    }
    public static long crypto_core_ed25519_scalarbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalarbytes$MH(), "unresolved symbol: crypto_core_ed25519_scalarbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_nonreducedscalarbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_nonreducedscalarbytes$MH(),"unresolved symbol: crypto_core_ed25519_nonreducedscalarbytes");
    }
    public static long crypto_core_ed25519_nonreducedscalarbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_nonreducedscalarbytes$MH(), "unresolved symbol: crypto_core_ed25519_nonreducedscalarbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_is_valid_point$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_is_valid_point$MH(),"unresolved symbol: crypto_core_ed25519_is_valid_point");
    }
    public static int crypto_core_ed25519_is_valid_point ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_is_valid_point$MH(), "unresolved symbol: crypto_core_ed25519_is_valid_point");
        try {
            return (int)mh$.invokeExact(p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_add$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_add$MH(),"unresolved symbol: crypto_core_ed25519_add");
    }
    public static int crypto_core_ed25519_add ( Addressable r,  Addressable p,  Addressable q) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_add$MH(), "unresolved symbol: crypto_core_ed25519_add");
        try {
            return (int)mh$.invokeExact(r.address(), p.address(), q.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_sub$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_sub$MH(),"unresolved symbol: crypto_core_ed25519_sub");
    }
    public static int crypto_core_ed25519_sub ( Addressable r,  Addressable p,  Addressable q) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_sub$MH(), "unresolved symbol: crypto_core_ed25519_sub");
        try {
            return (int)mh$.invokeExact(r.address(), p.address(), q.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_from_uniform$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_from_uniform$MH(),"unresolved symbol: crypto_core_ed25519_from_uniform");
    }
    public static int crypto_core_ed25519_from_uniform ( Addressable p,  Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_from_uniform$MH(), "unresolved symbol: crypto_core_ed25519_from_uniform");
        try {
            return (int)mh$.invokeExact(p.address(), r.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_from_hash$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_from_hash$MH(),"unresolved symbol: crypto_core_ed25519_from_hash");
    }
    public static int crypto_core_ed25519_from_hash ( Addressable p,  Addressable h) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_from_hash$MH(), "unresolved symbol: crypto_core_ed25519_from_hash");
        try {
            return (int)mh$.invokeExact(p.address(), h.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_random$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_random$MH(),"unresolved symbol: crypto_core_ed25519_random");
    }
    public static void crypto_core_ed25519_random ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_random$MH(), "unresolved symbol: crypto_core_ed25519_random");
        try {
            mh$.invokeExact(p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_random$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_random$MH(),"unresolved symbol: crypto_core_ed25519_scalar_random");
    }
    public static void crypto_core_ed25519_scalar_random ( Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_random$MH(), "unresolved symbol: crypto_core_ed25519_scalar_random");
        try {
            mh$.invokeExact(r.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_invert$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_invert$MH(),"unresolved symbol: crypto_core_ed25519_scalar_invert");
    }
    public static int crypto_core_ed25519_scalar_invert ( Addressable recip,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_invert$MH(), "unresolved symbol: crypto_core_ed25519_scalar_invert");
        try {
            return (int)mh$.invokeExact(recip.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_negate$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_negate$MH(),"unresolved symbol: crypto_core_ed25519_scalar_negate");
    }
    public static void crypto_core_ed25519_scalar_negate ( Addressable neg,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_negate$MH(), "unresolved symbol: crypto_core_ed25519_scalar_negate");
        try {
            mh$.invokeExact(neg.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_complement$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_complement$MH(),"unresolved symbol: crypto_core_ed25519_scalar_complement");
    }
    public static void crypto_core_ed25519_scalar_complement ( Addressable comp,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_complement$MH(), "unresolved symbol: crypto_core_ed25519_scalar_complement");
        try {
            mh$.invokeExact(comp.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_add$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_add$MH(),"unresolved symbol: crypto_core_ed25519_scalar_add");
    }
    public static void crypto_core_ed25519_scalar_add ( Addressable z,  Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_add$MH(), "unresolved symbol: crypto_core_ed25519_scalar_add");
        try {
            mh$.invokeExact(z.address(), x.address(), y.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_sub$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_sub$MH(),"unresolved symbol: crypto_core_ed25519_scalar_sub");
    }
    public static void crypto_core_ed25519_scalar_sub ( Addressable z,  Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_sub$MH(), "unresolved symbol: crypto_core_ed25519_scalar_sub");
        try {
            mh$.invokeExact(z.address(), x.address(), y.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_mul$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_mul$MH(),"unresolved symbol: crypto_core_ed25519_scalar_mul");
    }
    public static void crypto_core_ed25519_scalar_mul ( Addressable z,  Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_mul$MH(), "unresolved symbol: crypto_core_ed25519_scalar_mul");
        try {
            mh$.invokeExact(z.address(), x.address(), y.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ed25519_scalar_reduce$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_reduce$MH(),"unresolved symbol: crypto_core_ed25519_scalar_reduce");
    }
    public static void crypto_core_ed25519_scalar_reduce ( Addressable r,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ed25519_scalar_reduce$MH(), "unresolved symbol: crypto_core_ed25519_scalar_reduce");
        try {
            mh$.invokeExact(r.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_bytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_bytes$MH(),"unresolved symbol: crypto_core_ristretto255_bytes");
    }
    public static long crypto_core_ristretto255_bytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_bytes$MH(), "unresolved symbol: crypto_core_ristretto255_bytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_hashbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_hashbytes$MH(),"unresolved symbol: crypto_core_ristretto255_hashbytes");
    }
    public static long crypto_core_ristretto255_hashbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_hashbytes$MH(), "unresolved symbol: crypto_core_ristretto255_hashbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalarbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalarbytes$MH(),"unresolved symbol: crypto_core_ristretto255_scalarbytes");
    }
    public static long crypto_core_ristretto255_scalarbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalarbytes$MH(), "unresolved symbol: crypto_core_ristretto255_scalarbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_nonreducedscalarbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_nonreducedscalarbytes$MH(),"unresolved symbol: crypto_core_ristretto255_nonreducedscalarbytes");
    }
    public static long crypto_core_ristretto255_nonreducedscalarbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_nonreducedscalarbytes$MH(), "unresolved symbol: crypto_core_ristretto255_nonreducedscalarbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_is_valid_point$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_is_valid_point$MH(),"unresolved symbol: crypto_core_ristretto255_is_valid_point");
    }
    public static int crypto_core_ristretto255_is_valid_point ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_is_valid_point$MH(), "unresolved symbol: crypto_core_ristretto255_is_valid_point");
        try {
            return (int)mh$.invokeExact(p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_add$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_add$MH(),"unresolved symbol: crypto_core_ristretto255_add");
    }
    public static int crypto_core_ristretto255_add ( Addressable r,  Addressable p,  Addressable q) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_add$MH(), "unresolved symbol: crypto_core_ristretto255_add");
        try {
            return (int)mh$.invokeExact(r.address(), p.address(), q.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_sub$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_sub$MH(),"unresolved symbol: crypto_core_ristretto255_sub");
    }
    public static int crypto_core_ristretto255_sub ( Addressable r,  Addressable p,  Addressable q) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_sub$MH(), "unresolved symbol: crypto_core_ristretto255_sub");
        try {
            return (int)mh$.invokeExact(r.address(), p.address(), q.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_from_hash$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_from_hash$MH(),"unresolved symbol: crypto_core_ristretto255_from_hash");
    }
    public static int crypto_core_ristretto255_from_hash ( Addressable p,  Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_from_hash$MH(), "unresolved symbol: crypto_core_ristretto255_from_hash");
        try {
            return (int)mh$.invokeExact(p.address(), r.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_random$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_random$MH(),"unresolved symbol: crypto_core_ristretto255_random");
    }
    public static void crypto_core_ristretto255_random ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_random$MH(), "unresolved symbol: crypto_core_ristretto255_random");
        try {
            mh$.invokeExact(p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_random$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_random$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_random");
    }
    public static void crypto_core_ristretto255_scalar_random ( Addressable r) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_random$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_random");
        try {
            mh$.invokeExact(r.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_invert$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_invert$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_invert");
    }
    public static int crypto_core_ristretto255_scalar_invert ( Addressable recip,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_invert$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_invert");
        try {
            return (int)mh$.invokeExact(recip.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_negate$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_negate$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_negate");
    }
    public static void crypto_core_ristretto255_scalar_negate ( Addressable neg,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_negate$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_negate");
        try {
            mh$.invokeExact(neg.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_complement$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_complement$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_complement");
    }
    public static void crypto_core_ristretto255_scalar_complement ( Addressable comp,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_complement$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_complement");
        try {
            mh$.invokeExact(comp.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_add$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_add$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_add");
    }
    public static void crypto_core_ristretto255_scalar_add ( Addressable z,  Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_add$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_add");
        try {
            mh$.invokeExact(z.address(), x.address(), y.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_sub$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_sub$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_sub");
    }
    public static void crypto_core_ristretto255_scalar_sub ( Addressable z,  Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_sub$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_sub");
        try {
            mh$.invokeExact(z.address(), x.address(), y.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_mul$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_mul$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_mul");
    }
    public static void crypto_core_ristretto255_scalar_mul ( Addressable z,  Addressable x,  Addressable y) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_mul$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_mul");
        try {
            mh$.invokeExact(z.address(), x.address(), y.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_core_ristretto255_scalar_reduce$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_reduce$MH(),"unresolved symbol: crypto_core_ristretto255_scalar_reduce");
    }
    public static void crypto_core_ristretto255_scalar_reduce ( Addressable r,  Addressable s) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_core_ristretto255_scalar_reduce$MH(), "unresolved symbol: crypto_core_ristretto255_scalar_reduce");
        try {
            mh$.invokeExact(r.address(), s.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ed25519_bytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_bytes$MH(),"unresolved symbol: crypto_scalarmult_ed25519_bytes");
    }
    public static long crypto_scalarmult_ed25519_bytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_bytes$MH(), "unresolved symbol: crypto_scalarmult_ed25519_bytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ed25519_scalarbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_scalarbytes$MH(),"unresolved symbol: crypto_scalarmult_ed25519_scalarbytes");
    }
    public static long crypto_scalarmult_ed25519_scalarbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_scalarbytes$MH(), "unresolved symbol: crypto_scalarmult_ed25519_scalarbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ed25519$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519$MH(),"unresolved symbol: crypto_scalarmult_ed25519");
    }
    public static int crypto_scalarmult_ed25519 ( Addressable q,  Addressable n,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519$MH(), "unresolved symbol: crypto_scalarmult_ed25519");
        try {
            return (int)mh$.invokeExact(q.address(), n.address(), p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ed25519_noclamp$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_noclamp$MH(),"unresolved symbol: crypto_scalarmult_ed25519_noclamp");
    }
    public static int crypto_scalarmult_ed25519_noclamp ( Addressable q,  Addressable n,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_noclamp$MH(), "unresolved symbol: crypto_scalarmult_ed25519_noclamp");
        try {
            return (int)mh$.invokeExact(q.address(), n.address(), p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ed25519_base$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_base$MH(),"unresolved symbol: crypto_scalarmult_ed25519_base");
    }
    public static int crypto_scalarmult_ed25519_base ( Addressable q,  Addressable n) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_base$MH(), "unresolved symbol: crypto_scalarmult_ed25519_base");
        try {
            return (int)mh$.invokeExact(q.address(), n.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ed25519_base_noclamp$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_base_noclamp$MH(),"unresolved symbol: crypto_scalarmult_ed25519_base_noclamp");
    }
    public static int crypto_scalarmult_ed25519_base_noclamp ( Addressable q,  Addressable n) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ed25519_base_noclamp$MH(), "unresolved symbol: crypto_scalarmult_ed25519_base_noclamp");
        try {
            return (int)mh$.invokeExact(q.address(), n.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ristretto255_bytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255_bytes$MH(),"unresolved symbol: crypto_scalarmult_ristretto255_bytes");
    }
    public static long crypto_scalarmult_ristretto255_bytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255_bytes$MH(), "unresolved symbol: crypto_scalarmult_ristretto255_bytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ristretto255_scalarbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255_scalarbytes$MH(),"unresolved symbol: crypto_scalarmult_ristretto255_scalarbytes");
    }
    public static long crypto_scalarmult_ristretto255_scalarbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255_scalarbytes$MH(), "unresolved symbol: crypto_scalarmult_ristretto255_scalarbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ristretto255$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255$MH(),"unresolved symbol: crypto_scalarmult_ristretto255");
    }
    public static int crypto_scalarmult_ristretto255 ( Addressable q,  Addressable n,  Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255$MH(), "unresolved symbol: crypto_scalarmult_ristretto255");
        try {
            return (int)mh$.invokeExact(q.address(), n.address(), p.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_scalarmult_ristretto255_base$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255_base$MH(),"unresolved symbol: crypto_scalarmult_ristretto255_base");
    }
    public static int crypto_scalarmult_ristretto255_base ( Addressable q,  Addressable n) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_scalarmult_ristretto255_base$MH(), "unresolved symbol: crypto_scalarmult_ristretto255_base");
        try {
            return (int)mh$.invokeExact(q.address(), n.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_keybytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_keybytes$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_keybytes");
    }
    public static long crypto_secretbox_xchacha20poly1305_keybytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_keybytes$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_keybytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_noncebytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_noncebytes$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_noncebytes");
    }
    public static long crypto_secretbox_xchacha20poly1305_noncebytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_noncebytes$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_noncebytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_macbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_macbytes$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_macbytes");
    }
    public static long crypto_secretbox_xchacha20poly1305_macbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_macbytes$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_macbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_messagebytes_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_messagebytes_max$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_messagebytes_max");
    }
    public static long crypto_secretbox_xchacha20poly1305_messagebytes_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_messagebytes_max$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_messagebytes_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_easy$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_easy$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_easy");
    }
    public static int crypto_secretbox_xchacha20poly1305_easy ( Addressable c,  Addressable m,  long mlen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_easy$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_easy");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_open_easy$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_open_easy$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_open_easy");
    }
    public static int crypto_secretbox_xchacha20poly1305_open_easy ( Addressable m,  Addressable c,  long clen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_open_easy$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_open_easy");
        try {
            return (int)mh$.invokeExact(m.address(), c.address(), clen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_detached$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_detached$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_detached");
    }
    public static int crypto_secretbox_xchacha20poly1305_detached ( Addressable c,  Addressable mac,  Addressable m,  long mlen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_detached$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_detached");
        try {
            return (int)mh$.invokeExact(c.address(), mac.address(), m.address(), mlen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_secretbox_xchacha20poly1305_open_detached$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_open_detached$MH(),"unresolved symbol: crypto_secretbox_xchacha20poly1305_open_detached");
    }
    public static int crypto_secretbox_xchacha20poly1305_open_detached ( Addressable m,  Addressable c,  Addressable mac,  long clen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_open_detached$MH(), "unresolved symbol: crypto_secretbox_xchacha20poly1305_open_detached");
        try {
            return (int)mh$.invokeExact(m.address(), c.address(), mac.address(), clen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_bytes_min$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_bytes_min$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_bytes_min");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_bytes_min () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_bytes_min$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_bytes_min");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_bytes_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_bytes_max$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_bytes_max");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_bytes_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_bytes_max$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_bytes_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_passwd_min$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_passwd_min$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_passwd_min");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_passwd_min () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_passwd_min$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_passwd_min");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_passwd_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_passwd_max$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_passwd_max");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_passwd_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_passwd_max$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_passwd_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_saltbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_saltbytes$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_saltbytes");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_saltbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_saltbytes$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_saltbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_strbytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_strbytes$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_strbytes");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_strbytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_strbytes$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_strbytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_strprefix$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_strprefix$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_strprefix");
    }
    public static MemoryAddress crypto_pwhash_scryptsalsa208sha256_strprefix () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_strprefix$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_strprefix");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_min$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_min$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_min");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_opslimit_min () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_min$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_min");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_max$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_max");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_opslimit_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_max$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_min$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_min$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_min");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_memlimit_min () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_min$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_min");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_max$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_max");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_memlimit_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_max$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_interactive");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_opslimit_interactive () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_interactive");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_interactive");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_memlimit_interactive () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_interactive");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive");
    }
    public static long crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256");
    }
    public static int crypto_pwhash_scryptsalsa208sha256 ( Addressable out,  long outlen,  Addressable passwd,  long passwdlen,  Addressable salt,  long opslimit,  long memlimit) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256");
        try {
            return (int)mh$.invokeExact(out.address(), outlen, passwd.address(), passwdlen, salt.address(), opslimit, memlimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_str$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_str$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_str");
    }
    public static int crypto_pwhash_scryptsalsa208sha256_str ( Addressable out,  Addressable passwd,  long passwdlen,  long opslimit,  long memlimit) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_str$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_str");
        try {
            return (int)mh$.invokeExact(out.address(), passwd.address(), passwdlen, opslimit, memlimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_str_verify$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_str_verify$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_str_verify");
    }
    public static int crypto_pwhash_scryptsalsa208sha256_str_verify ( Addressable str,  Addressable passwd,  long passwdlen) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_str_verify$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_str_verify");
        try {
            return (int)mh$.invokeExact(str.address(), passwd.address(), passwdlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_ll$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_ll$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_ll");
    }
    public static int crypto_pwhash_scryptsalsa208sha256_ll ( Addressable passwd,  long passwdlen,  Addressable salt,  long saltlen,  long N,  int r,  int p,  Addressable buf,  long buflen) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_ll$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_ll");
        try {
            return (int)mh$.invokeExact(passwd.address(), passwdlen, salt.address(), saltlen, N, r, p, buf.address(), buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$MH(),"unresolved symbol: crypto_pwhash_scryptsalsa208sha256_str_needs_rehash");
    }
    public static int crypto_pwhash_scryptsalsa208sha256_str_needs_rehash ( Addressable str,  long opslimit,  long memlimit) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$MH(), "unresolved symbol: crypto_pwhash_scryptsalsa208sha256_str_needs_rehash");
        try {
            return (int)mh$.invokeExact(str.address(), opslimit, memlimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa2012_keybytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_keybytes$MH(),"unresolved symbol: crypto_stream_salsa2012_keybytes");
    }
    public static long crypto_stream_salsa2012_keybytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_keybytes$MH(), "unresolved symbol: crypto_stream_salsa2012_keybytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa2012_noncebytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_noncebytes$MH(),"unresolved symbol: crypto_stream_salsa2012_noncebytes");
    }
    public static long crypto_stream_salsa2012_noncebytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_noncebytes$MH(), "unresolved symbol: crypto_stream_salsa2012_noncebytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa2012_messagebytes_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_messagebytes_max$MH(),"unresolved symbol: crypto_stream_salsa2012_messagebytes_max");
    }
    public static long crypto_stream_salsa2012_messagebytes_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_messagebytes_max$MH(), "unresolved symbol: crypto_stream_salsa2012_messagebytes_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa2012$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012$MH(),"unresolved symbol: crypto_stream_salsa2012");
    }
    public static int crypto_stream_salsa2012 ( Addressable c,  long clen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012$MH(), "unresolved symbol: crypto_stream_salsa2012");
        try {
            return (int)mh$.invokeExact(c.address(), clen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa2012_xor$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_xor$MH(),"unresolved symbol: crypto_stream_salsa2012_xor");
    }
    public static int crypto_stream_salsa2012_xor ( Addressable c,  Addressable m,  long mlen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_xor$MH(), "unresolved symbol: crypto_stream_salsa2012_xor");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa2012_keygen$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_keygen$MH(),"unresolved symbol: crypto_stream_salsa2012_keygen");
    }
    public static void crypto_stream_salsa2012_keygen ( Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa2012_keygen$MH(), "unresolved symbol: crypto_stream_salsa2012_keygen");
        try {
            mh$.invokeExact(k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa208_keybytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_keybytes$MH(),"unresolved symbol: crypto_stream_salsa208_keybytes");
    }
    public static long crypto_stream_salsa208_keybytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_keybytes$MH(), "unresolved symbol: crypto_stream_salsa208_keybytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa208_noncebytes$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_noncebytes$MH(),"unresolved symbol: crypto_stream_salsa208_noncebytes");
    }
    public static long crypto_stream_salsa208_noncebytes () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_noncebytes$MH(), "unresolved symbol: crypto_stream_salsa208_noncebytes");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa208_messagebytes_max$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_messagebytes_max$MH(),"unresolved symbol: crypto_stream_salsa208_messagebytes_max");
    }
    public static long crypto_stream_salsa208_messagebytes_max () {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_messagebytes_max$MH(), "unresolved symbol: crypto_stream_salsa208_messagebytes_max");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa208$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208$MH(),"unresolved symbol: crypto_stream_salsa208");
    }
    public static int crypto_stream_salsa208 ( Addressable c,  long clen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208$MH(), "unresolved symbol: crypto_stream_salsa208");
        try {
            return (int)mh$.invokeExact(c.address(), clen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa208_xor$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_xor$MH(),"unresolved symbol: crypto_stream_salsa208_xor");
    }
    public static int crypto_stream_salsa208_xor ( Addressable c,  Addressable m,  long mlen,  Addressable n,  Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_xor$MH(), "unresolved symbol: crypto_stream_salsa208_xor");
        try {
            return (int)mh$.invokeExact(c.address(), m.address(), mlen, n.address(), k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  MethodHandle crypto_stream_salsa208_keygen$MH() {
        return RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_keygen$MH(),"unresolved symbol: crypto_stream_salsa208_keygen");
    }
    public static void crypto_stream_salsa208_keygen ( Addressable k) {
        var mh$ = RuntimeHelper.requireNonNull(sodium_h_constants_1.crypto_stream_salsa208_keygen$MH(), "unresolved symbol: crypto_stream_salsa208_keygen");
        try {
            mh$.invokeExact(k.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static  long SODIUM_SIZE_MAX() {
        return sodium_h_constants_1.SODIUM_SIZE_MAX();
    }
    public static  MemorySegment SODIUM_VERSION_STRING() {
        return sodium_h_constants_1.SODIUM_VERSION_STRING();
    }
    public static  int crypto_aead_aes256gcm_KEYBYTES() {
        return sodium_h_constants_1.crypto_aead_aes256gcm_KEYBYTES();
    }
    public static  int crypto_aead_aes256gcm_NSECBYTES() {
        return sodium_h_constants_1.crypto_aead_aes256gcm_NSECBYTES();
    }
    public static  int crypto_aead_aes256gcm_NPUBBYTES() {
        return sodium_h_constants_1.crypto_aead_aes256gcm_NPUBBYTES();
    }
    public static  int crypto_aead_aes256gcm_ABYTES() {
        return sodium_h_constants_1.crypto_aead_aes256gcm_ABYTES();
    }
    public static  long crypto_aead_aes256gcm_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_aead_aes256gcm_MESSAGEBYTES_MAX();
    }
    public static  int crypto_aead_chacha20poly1305_ietf_KEYBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_ietf_KEYBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_ietf_NSECBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_ietf_NSECBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_ietf_NPUBBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_ietf_NPUBBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_ietf_ABYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_ietf_ABYTES();
    }
    public static  long crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX();
    }
    public static  int crypto_aead_chacha20poly1305_KEYBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_KEYBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_NSECBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_NSECBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_NPUBBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_NPUBBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_ABYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_ABYTES();
    }
    public static  long crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX();
    }
    public static  int crypto_aead_chacha20poly1305_IETF_KEYBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_IETF_KEYBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_IETF_NSECBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_IETF_NSECBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_IETF_NPUBBYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_IETF_NPUBBYTES();
    }
    public static  int crypto_aead_chacha20poly1305_IETF_ABYTES() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_IETF_ABYTES();
    }
    public static  long crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX();
    }
    public static  int crypto_aead_xchacha20poly1305_ietf_KEYBYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_ietf_KEYBYTES();
    }
    public static  int crypto_aead_xchacha20poly1305_ietf_NSECBYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_ietf_NSECBYTES();
    }
    public static  int crypto_aead_xchacha20poly1305_ietf_NPUBBYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES();
    }
    public static  int crypto_aead_xchacha20poly1305_ietf_ABYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_ietf_ABYTES();
    }
    public static  long crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX();
    }
    public static  int crypto_aead_xchacha20poly1305_IETF_KEYBYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_IETF_KEYBYTES();
    }
    public static  int crypto_aead_xchacha20poly1305_IETF_NSECBYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_IETF_NSECBYTES();
    }
    public static  int crypto_aead_xchacha20poly1305_IETF_NPUBBYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_IETF_NPUBBYTES();
    }
    public static  int crypto_aead_xchacha20poly1305_IETF_ABYTES() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_IETF_ABYTES();
    }
    public static  long crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX();
    }
    public static  int crypto_hash_sha512_BYTES() {
        return sodium_h_constants_1.crypto_hash_sha512_BYTES();
    }
    public static  int crypto_auth_hmacsha512_BYTES() {
        return sodium_h_constants_1.crypto_auth_hmacsha512_BYTES();
    }
    public static  int crypto_auth_hmacsha512_KEYBYTES() {
        return sodium_h_constants_1.crypto_auth_hmacsha512_KEYBYTES();
    }
    public static  int crypto_auth_hmacsha512256_BYTES() {
        return sodium_h_constants_1.crypto_auth_hmacsha512256_BYTES();
    }
    public static  int crypto_auth_hmacsha512256_KEYBYTES() {
        return sodium_h_constants_1.crypto_auth_hmacsha512256_KEYBYTES();
    }
    public static  int crypto_auth_BYTES() {
        return sodium_h_constants_1.crypto_auth_BYTES();
    }
    public static  int crypto_auth_KEYBYTES() {
        return sodium_h_constants_1.crypto_auth_KEYBYTES();
    }
    public static  MemorySegment crypto_auth_PRIMITIVE() {
        return sodium_h_constants_1.crypto_auth_PRIMITIVE();
    }
    public static  int crypto_hash_sha256_BYTES() {
        return sodium_h_constants_1.crypto_hash_sha256_BYTES();
    }
    public static  int crypto_auth_hmacsha256_BYTES() {
        return sodium_h_constants_1.crypto_auth_hmacsha256_BYTES();
    }
    public static  int crypto_auth_hmacsha256_KEYBYTES() {
        return sodium_h_constants_1.crypto_auth_hmacsha256_KEYBYTES();
    }
    public static  int crypto_stream_xsalsa20_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_xsalsa20_KEYBYTES();
    }
    public static  int crypto_stream_xsalsa20_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_xsalsa20_NONCEBYTES();
    }
    public static  long crypto_stream_xsalsa20_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_xsalsa20_MESSAGEBYTES_MAX();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_SEEDBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_SEEDBYTES();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_NONCEBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_NONCEBYTES();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_MACBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_MACBYTES();
    }
    public static  long crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES();
    }
    public static  int crypto_box_curve25519xsalsa20poly1305_ZEROBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xsalsa20poly1305_ZEROBYTES();
    }
    public static  int crypto_box_SEEDBYTES() {
        return sodium_h_constants_1.crypto_box_SEEDBYTES();
    }
    public static  int crypto_box_PUBLICKEYBYTES() {
        return sodium_h_constants_1.crypto_box_PUBLICKEYBYTES();
    }
    public static  int crypto_box_SECRETKEYBYTES() {
        return sodium_h_constants_1.crypto_box_SECRETKEYBYTES();
    }
    public static  int crypto_box_NONCEBYTES() {
        return sodium_h_constants_1.crypto_box_NONCEBYTES();
    }
    public static  int crypto_box_MACBYTES() {
        return sodium_h_constants_1.crypto_box_MACBYTES();
    }
    public static  long crypto_box_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_box_MESSAGEBYTES_MAX();
    }
    public static  MemorySegment crypto_box_PRIMITIVE() {
        return sodium_h_constants_1.crypto_box_PRIMITIVE();
    }
    public static  int crypto_box_BEFORENMBYTES() {
        return sodium_h_constants_1.crypto_box_BEFORENMBYTES();
    }
    public static  int crypto_box_SEALBYTES() {
        return sodium_h_constants_1.crypto_box_SEALBYTES();
    }
    public static  int crypto_box_ZEROBYTES() {
        return sodium_h_constants_1.crypto_box_ZEROBYTES();
    }
    public static  int crypto_box_BOXZEROBYTES() {
        return sodium_h_constants_1.crypto_box_BOXZEROBYTES();
    }
    public static  int crypto_core_hsalsa20_OUTPUTBYTES() {
        return sodium_h_constants_1.crypto_core_hsalsa20_OUTPUTBYTES();
    }
    public static  int crypto_core_hsalsa20_INPUTBYTES() {
        return sodium_h_constants_1.crypto_core_hsalsa20_INPUTBYTES();
    }
    public static  int crypto_core_hsalsa20_KEYBYTES() {
        return sodium_h_constants_1.crypto_core_hsalsa20_KEYBYTES();
    }
    public static  int crypto_core_hsalsa20_CONSTBYTES() {
        return sodium_h_constants_1.crypto_core_hsalsa20_CONSTBYTES();
    }
    public static  int crypto_core_hchacha20_OUTPUTBYTES() {
        return sodium_h_constants_1.crypto_core_hchacha20_OUTPUTBYTES();
    }
    public static  int crypto_core_hchacha20_INPUTBYTES() {
        return sodium_h_constants_1.crypto_core_hchacha20_INPUTBYTES();
    }
    public static  int crypto_core_hchacha20_KEYBYTES() {
        return sodium_h_constants_1.crypto_core_hchacha20_KEYBYTES();
    }
    public static  int crypto_core_hchacha20_CONSTBYTES() {
        return sodium_h_constants_1.crypto_core_hchacha20_CONSTBYTES();
    }
    public static  int crypto_core_salsa20_OUTPUTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa20_OUTPUTBYTES();
    }
    public static  int crypto_core_salsa20_INPUTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa20_INPUTBYTES();
    }
    public static  int crypto_core_salsa20_KEYBYTES() {
        return sodium_h_constants_1.crypto_core_salsa20_KEYBYTES();
    }
    public static  int crypto_core_salsa20_CONSTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa20_CONSTBYTES();
    }
    public static  int crypto_core_salsa2012_OUTPUTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa2012_OUTPUTBYTES();
    }
    public static  int crypto_core_salsa2012_INPUTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa2012_INPUTBYTES();
    }
    public static  int crypto_core_salsa2012_KEYBYTES() {
        return sodium_h_constants_1.crypto_core_salsa2012_KEYBYTES();
    }
    public static  int crypto_core_salsa2012_CONSTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa2012_CONSTBYTES();
    }
    public static  int crypto_core_salsa208_OUTPUTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa208_OUTPUTBYTES();
    }
    public static  int crypto_core_salsa208_INPUTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa208_INPUTBYTES();
    }
    public static  int crypto_core_salsa208_KEYBYTES() {
        return sodium_h_constants_1.crypto_core_salsa208_KEYBYTES();
    }
    public static  int crypto_core_salsa208_CONSTBYTES() {
        return sodium_h_constants_1.crypto_core_salsa208_CONSTBYTES();
    }
    public static  int crypto_generichash_blake2b_BYTES_MIN() {
        return sodium_h_constants_1.crypto_generichash_blake2b_BYTES_MIN();
    }
    public static  int crypto_generichash_blake2b_BYTES_MAX() {
        return sodium_h_constants_1.crypto_generichash_blake2b_BYTES_MAX();
    }
    public static  int crypto_generichash_blake2b_BYTES() {
        return sodium_h_constants_1.crypto_generichash_blake2b_BYTES();
    }
    public static  int crypto_generichash_blake2b_KEYBYTES_MIN() {
        return sodium_h_constants_1.crypto_generichash_blake2b_KEYBYTES_MIN();
    }
    public static  int crypto_generichash_blake2b_KEYBYTES_MAX() {
        return sodium_h_constants_1.crypto_generichash_blake2b_KEYBYTES_MAX();
    }
    public static  int crypto_generichash_blake2b_KEYBYTES() {
        return sodium_h_constants_1.crypto_generichash_blake2b_KEYBYTES();
    }
    public static  int crypto_generichash_blake2b_SALTBYTES() {
        return sodium_h_constants_1.crypto_generichash_blake2b_SALTBYTES();
    }
    public static  int crypto_generichash_blake2b_PERSONALBYTES() {
        return sodium_h_constants_1.crypto_generichash_blake2b_PERSONALBYTES();
    }
    public static  int crypto_generichash_BYTES_MIN() {
        return sodium_h_constants_1.crypto_generichash_BYTES_MIN();
    }
    public static  int crypto_generichash_BYTES_MAX() {
        return sodium_h_constants_1.crypto_generichash_BYTES_MAX();
    }
    public static  int crypto_generichash_BYTES() {
        return sodium_h_constants_1.crypto_generichash_BYTES();
    }
    public static  int crypto_generichash_KEYBYTES_MIN() {
        return sodium_h_constants_1.crypto_generichash_KEYBYTES_MIN();
    }
    public static  int crypto_generichash_KEYBYTES_MAX() {
        return sodium_h_constants_1.crypto_generichash_KEYBYTES_MAX();
    }
    public static  int crypto_generichash_KEYBYTES() {
        return sodium_h_constants_1.crypto_generichash_KEYBYTES();
    }
    public static  MemorySegment crypto_generichash_PRIMITIVE() {
        return sodium_h_constants_1.crypto_generichash_PRIMITIVE();
    }
    public static  int crypto_hash_BYTES() {
        return sodium_h_constants_1.crypto_hash_BYTES();
    }
    public static  MemorySegment crypto_hash_PRIMITIVE() {
        return sodium_h_constants_1.crypto_hash_PRIMITIVE();
    }
    public static  int crypto_kdf_BYTES_MIN() {
        return sodium_h_constants_1.crypto_kdf_BYTES_MIN();
    }
    public static  int crypto_kdf_BYTES_MAX() {
        return sodium_h_constants_1.crypto_kdf_BYTES_MAX();
    }
    public static  int crypto_kdf_CONTEXTBYTES() {
        return sodium_h_constants_1.crypto_kdf_CONTEXTBYTES();
    }
    public static  int crypto_kdf_KEYBYTES() {
        return sodium_h_constants_1.crypto_kdf_KEYBYTES();
    }
    public static  MemorySegment crypto_kdf_PRIMITIVE() {
        return sodium_h_constants_1.crypto_kdf_PRIMITIVE();
    }
    public static  MemorySegment crypto_kx_PRIMITIVE() {
        return sodium_h_constants_1.crypto_kx_PRIMITIVE();
    }
    public static  int crypto_onetimeauth_poly1305_BYTES() {
        return sodium_h_constants_1.crypto_onetimeauth_poly1305_BYTES();
    }
    public static  int crypto_onetimeauth_poly1305_KEYBYTES() {
        return sodium_h_constants_1.crypto_onetimeauth_poly1305_KEYBYTES();
    }
    public static  int crypto_onetimeauth_BYTES() {
        return sodium_h_constants_1.crypto_onetimeauth_BYTES();
    }
    public static  int crypto_onetimeauth_KEYBYTES() {
        return sodium_h_constants_1.crypto_onetimeauth_KEYBYTES();
    }
    public static  MemorySegment crypto_onetimeauth_PRIMITIVE() {
        return sodium_h_constants_1.crypto_onetimeauth_PRIMITIVE();
    }
    public static  int crypto_pwhash_argon2i_BYTES_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_BYTES_MIN();
    }
    public static  long crypto_pwhash_argon2i_BYTES_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_BYTES_MAX();
    }
    public static  int crypto_pwhash_argon2i_PASSWD_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_PASSWD_MIN();
    }
    public static  int crypto_pwhash_argon2i_PASSWD_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_PASSWD_MAX();
    }
    public static  int crypto_pwhash_argon2i_SALTBYTES() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_SALTBYTES();
    }
    public static  int crypto_pwhash_argon2i_STRBYTES() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_STRBYTES();
    }
    public static  MemorySegment crypto_pwhash_argon2i_STRPREFIX() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_STRPREFIX();
    }
    public static  int crypto_pwhash_argon2i_OPSLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_OPSLIMIT_MIN();
    }
    public static  int crypto_pwhash_argon2i_OPSLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_OPSLIMIT_MAX();
    }
    public static  int crypto_pwhash_argon2i_MEMLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_MEMLIMIT_MIN();
    }
    public static  long crypto_pwhash_argon2i_MEMLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_MEMLIMIT_MAX();
    }
    public static  int crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_argon2i_OPSLIMIT_MODERATE() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_OPSLIMIT_MODERATE();
    }
    public static  int crypto_pwhash_argon2i_MEMLIMIT_MODERATE() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_MEMLIMIT_MODERATE();
    }
    public static  int crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE();
    }
    public static  int crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE();
    }
    public static  int crypto_pwhash_argon2id_BYTES_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_BYTES_MIN();
    }
    public static  long crypto_pwhash_argon2id_BYTES_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_BYTES_MAX();
    }
    public static  int crypto_pwhash_argon2id_PASSWD_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_PASSWD_MIN();
    }
    public static  int crypto_pwhash_argon2id_PASSWD_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_PASSWD_MAX();
    }
    public static  int crypto_pwhash_argon2id_SALTBYTES() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_SALTBYTES();
    }
    public static  int crypto_pwhash_argon2id_STRBYTES() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_STRBYTES();
    }
    public static  MemorySegment crypto_pwhash_argon2id_STRPREFIX() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_STRPREFIX();
    }
    public static  int crypto_pwhash_argon2id_OPSLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_OPSLIMIT_MIN();
    }
    public static  int crypto_pwhash_argon2id_OPSLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_OPSLIMIT_MAX();
    }
    public static  int crypto_pwhash_argon2id_MEMLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_MEMLIMIT_MIN();
    }
    public static  long crypto_pwhash_argon2id_MEMLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_MEMLIMIT_MAX();
    }
    public static  int crypto_pwhash_argon2id_OPSLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_OPSLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_argon2id_MEMLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_MEMLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_argon2id_OPSLIMIT_MODERATE() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_OPSLIMIT_MODERATE();
    }
    public static  int crypto_pwhash_argon2id_MEMLIMIT_MODERATE() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_MEMLIMIT_MODERATE();
    }
    public static  int crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE();
    }
    public static  int crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE();
    }
    public static  int crypto_pwhash_ALG_ARGON2I13() {
        return sodium_h_constants_1.crypto_pwhash_ALG_ARGON2I13();
    }
    public static  int crypto_pwhash_ALG_ARGON2ID13() {
        return sodium_h_constants_1.crypto_pwhash_ALG_ARGON2ID13();
    }
    public static  int crypto_pwhash_ALG_DEFAULT() {
        return sodium_h_constants_1.crypto_pwhash_ALG_DEFAULT();
    }
    public static  int crypto_pwhash_BYTES_MIN() {
        return sodium_h_constants_1.crypto_pwhash_BYTES_MIN();
    }
    public static  long crypto_pwhash_BYTES_MAX() {
        return sodium_h_constants_1.crypto_pwhash_BYTES_MAX();
    }
    public static  int crypto_pwhash_PASSWD_MIN() {
        return sodium_h_constants_1.crypto_pwhash_PASSWD_MIN();
    }
    public static  int crypto_pwhash_PASSWD_MAX() {
        return sodium_h_constants_1.crypto_pwhash_PASSWD_MAX();
    }
    public static  int crypto_pwhash_SALTBYTES() {
        return sodium_h_constants_1.crypto_pwhash_SALTBYTES();
    }
    public static  int crypto_pwhash_STRBYTES() {
        return sodium_h_constants_1.crypto_pwhash_STRBYTES();
    }
    public static  MemorySegment crypto_pwhash_STRPREFIX() {
        return sodium_h_constants_1.crypto_pwhash_STRPREFIX();
    }
    public static  int crypto_pwhash_OPSLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_OPSLIMIT_MIN();
    }
    public static  int crypto_pwhash_OPSLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_OPSLIMIT_MAX();
    }
    public static  int crypto_pwhash_MEMLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_MEMLIMIT_MIN();
    }
    public static  long crypto_pwhash_MEMLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_MEMLIMIT_MAX();
    }
    public static  int crypto_pwhash_OPSLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_OPSLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_MEMLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_MEMLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_OPSLIMIT_MODERATE() {
        return sodium_h_constants_1.crypto_pwhash_OPSLIMIT_MODERATE();
    }
    public static  int crypto_pwhash_MEMLIMIT_MODERATE() {
        return sodium_h_constants_1.crypto_pwhash_MEMLIMIT_MODERATE();
    }
    public static  int crypto_pwhash_OPSLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_OPSLIMIT_SENSITIVE();
    }
    public static  int crypto_pwhash_MEMLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_MEMLIMIT_SENSITIVE();
    }
    public static  MemorySegment crypto_pwhash_PRIMITIVE() {
        return sodium_h_constants_1.crypto_pwhash_PRIMITIVE();
    }
    public static  int crypto_scalarmult_curve25519_BYTES() {
        return sodium_h_constants_1.crypto_scalarmult_curve25519_BYTES();
    }
    public static  int crypto_scalarmult_curve25519_SCALARBYTES() {
        return sodium_h_constants_1.crypto_scalarmult_curve25519_SCALARBYTES();
    }
    public static  int crypto_scalarmult_BYTES() {
        return sodium_h_constants_1.crypto_scalarmult_BYTES();
    }
    public static  int crypto_scalarmult_SCALARBYTES() {
        return sodium_h_constants_1.crypto_scalarmult_SCALARBYTES();
    }
    public static  MemorySegment crypto_scalarmult_PRIMITIVE() {
        return sodium_h_constants_1.crypto_scalarmult_PRIMITIVE();
    }
    public static  int crypto_secretbox_xsalsa20poly1305_KEYBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xsalsa20poly1305_KEYBYTES();
    }
    public static  int crypto_secretbox_xsalsa20poly1305_NONCEBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xsalsa20poly1305_NONCEBYTES();
    }
    public static  int crypto_secretbox_xsalsa20poly1305_MACBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xsalsa20poly1305_MACBYTES();
    }
    public static  long crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX();
    }
    public static  int crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES();
    }
    public static  int crypto_secretbox_xsalsa20poly1305_ZEROBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xsalsa20poly1305_ZEROBYTES();
    }
    public static  int crypto_secretbox_KEYBYTES() {
        return sodium_h_constants_1.crypto_secretbox_KEYBYTES();
    }
    public static  int crypto_secretbox_NONCEBYTES() {
        return sodium_h_constants_1.crypto_secretbox_NONCEBYTES();
    }
    public static  int crypto_secretbox_MACBYTES() {
        return sodium_h_constants_1.crypto_secretbox_MACBYTES();
    }
    public static  MemorySegment crypto_secretbox_PRIMITIVE() {
        return sodium_h_constants_1.crypto_secretbox_PRIMITIVE();
    }
    public static  long crypto_secretbox_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_secretbox_MESSAGEBYTES_MAX();
    }
    public static  int crypto_secretbox_ZEROBYTES() {
        return sodium_h_constants_1.crypto_secretbox_ZEROBYTES();
    }
    public static  int crypto_secretbox_BOXZEROBYTES() {
        return sodium_h_constants_1.crypto_secretbox_BOXZEROBYTES();
    }
    public static  int crypto_stream_chacha20_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_chacha20_KEYBYTES();
    }
    public static  int crypto_stream_chacha20_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_chacha20_NONCEBYTES();
    }
    public static  long crypto_stream_chacha20_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_chacha20_MESSAGEBYTES_MAX();
    }
    public static  int crypto_stream_chacha20_ietf_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_chacha20_ietf_KEYBYTES();
    }
    public static  int crypto_stream_chacha20_ietf_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_chacha20_ietf_NONCEBYTES();
    }
    public static  long crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX();
    }
    public static  int crypto_stream_chacha20_IETF_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_chacha20_IETF_KEYBYTES();
    }
    public static  int crypto_stream_chacha20_IETF_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_chacha20_IETF_NONCEBYTES();
    }
    public static  long crypto_stream_chacha20_IETF_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_chacha20_IETF_MESSAGEBYTES_MAX();
    }
    public static  int crypto_secretstream_xchacha20poly1305_ABYTES() {
        return sodium_h_constants_1.crypto_secretstream_xchacha20poly1305_ABYTES();
    }
    public static  int crypto_secretstream_xchacha20poly1305_HEADERBYTES() {
        return sodium_h_constants_1.crypto_secretstream_xchacha20poly1305_HEADERBYTES();
    }
    public static  int crypto_secretstream_xchacha20poly1305_KEYBYTES() {
        return sodium_h_constants_1.crypto_secretstream_xchacha20poly1305_KEYBYTES();
    }
    public static  long crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX();
    }
    public static  int crypto_secretstream_xchacha20poly1305_TAG_FINAL() {
        return sodium_h_constants_1.crypto_secretstream_xchacha20poly1305_TAG_FINAL();
    }
    public static  int crypto_shorthash_siphash24_BYTES() {
        return sodium_h_constants_1.crypto_shorthash_siphash24_BYTES();
    }
    public static  int crypto_shorthash_siphash24_KEYBYTES() {
        return sodium_h_constants_1.crypto_shorthash_siphash24_KEYBYTES();
    }
    public static  int crypto_shorthash_siphashx24_BYTES() {
        return sodium_h_constants_1.crypto_shorthash_siphashx24_BYTES();
    }
    public static  int crypto_shorthash_siphashx24_KEYBYTES() {
        return sodium_h_constants_1.crypto_shorthash_siphashx24_KEYBYTES();
    }
    public static  int crypto_shorthash_BYTES() {
        return sodium_h_constants_1.crypto_shorthash_BYTES();
    }
    public static  int crypto_shorthash_KEYBYTES() {
        return sodium_h_constants_1.crypto_shorthash_KEYBYTES();
    }
    public static  MemorySegment crypto_shorthash_PRIMITIVE() {
        return sodium_h_constants_1.crypto_shorthash_PRIMITIVE();
    }
    public static  int crypto_sign_ed25519_BYTES() {
        return sodium_h_constants_1.crypto_sign_ed25519_BYTES();
    }
    public static  int crypto_sign_ed25519_SEEDBYTES() {
        return sodium_h_constants_1.crypto_sign_ed25519_SEEDBYTES();
    }
    public static  int crypto_sign_ed25519_PUBLICKEYBYTES() {
        return sodium_h_constants_1.crypto_sign_ed25519_PUBLICKEYBYTES();
    }
    public static  int crypto_sign_ed25519_SECRETKEYBYTES() {
        return sodium_h_constants_1.crypto_sign_ed25519_SECRETKEYBYTES();
    }
    public static  long crypto_sign_ed25519_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_sign_ed25519_MESSAGEBYTES_MAX();
    }
    public static  int crypto_sign_BYTES() {
        return sodium_h_constants_1.crypto_sign_BYTES();
    }
    public static  int crypto_sign_SEEDBYTES() {
        return sodium_h_constants_1.crypto_sign_SEEDBYTES();
    }
    public static  int crypto_sign_PUBLICKEYBYTES() {
        return sodium_h_constants_1.crypto_sign_PUBLICKEYBYTES();
    }
    public static  int crypto_sign_SECRETKEYBYTES() {
        return sodium_h_constants_1.crypto_sign_SECRETKEYBYTES();
    }
    public static  long crypto_sign_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_sign_MESSAGEBYTES_MAX();
    }
    public static  MemorySegment crypto_sign_PRIMITIVE() {
        return sodium_h_constants_1.crypto_sign_PRIMITIVE();
    }
    public static  int crypto_stream_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_KEYBYTES();
    }
    public static  int crypto_stream_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_NONCEBYTES();
    }
    public static  long crypto_stream_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_MESSAGEBYTES_MAX();
    }
    public static  MemorySegment crypto_stream_PRIMITIVE() {
        return sodium_h_constants_1.crypto_stream_PRIMITIVE();
    }
    public static  int crypto_stream_salsa20_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_salsa20_KEYBYTES();
    }
    public static  int crypto_stream_salsa20_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_salsa20_NONCEBYTES();
    }
    public static  long crypto_stream_salsa20_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_salsa20_MESSAGEBYTES_MAX();
    }
    public static  int crypto_verify_16_BYTES() {
        return sodium_h_constants_1.crypto_verify_16_BYTES();
    }
    public static  int crypto_verify_32_BYTES() {
        return sodium_h_constants_1.crypto_verify_32_BYTES();
    }
    public static  int crypto_verify_64_BYTES() {
        return sodium_h_constants_1.crypto_verify_64_BYTES();
    }
    public static  long randombytes_BYTES_MAX() {
        return sodium_h_constants_1.randombytes_BYTES_MAX();
    }
    public static  int randombytes_SEEDBYTES() {
        return sodium_h_constants_1.randombytes_SEEDBYTES();
    }
    public static  int crypto_stream_xchacha20_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_xchacha20_KEYBYTES();
    }
    public static  int crypto_stream_xchacha20_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_xchacha20_NONCEBYTES();
    }
    public static  long crypto_stream_xchacha20_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_xchacha20_MESSAGEBYTES_MAX();
    }
    public static  int crypto_box_curve25519xchacha20poly1305_SEEDBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_SEEDBYTES();
    }
    public static  int crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES();
    }
    public static  int crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES();
    }
    public static  int crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES();
    }
    public static  int crypto_box_curve25519xchacha20poly1305_NONCEBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_NONCEBYTES();
    }
    public static  int crypto_box_curve25519xchacha20poly1305_MACBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_MACBYTES();
    }
    public static  long crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX();
    }
    public static  int crypto_box_curve25519xchacha20poly1305_SEALBYTES() {
        return sodium_h_constants_1.crypto_box_curve25519xchacha20poly1305_SEALBYTES();
    }
    public static  int crypto_scalarmult_ed25519_BYTES() {
        return sodium_h_constants_1.crypto_scalarmult_ed25519_BYTES();
    }
    public static  int crypto_scalarmult_ed25519_SCALARBYTES() {
        return sodium_h_constants_1.crypto_scalarmult_ed25519_SCALARBYTES();
    }
    public static  int crypto_scalarmult_ristretto255_BYTES() {
        return sodium_h_constants_1.crypto_scalarmult_ristretto255_BYTES();
    }
    public static  int crypto_scalarmult_ristretto255_SCALARBYTES() {
        return sodium_h_constants_1.crypto_scalarmult_ristretto255_SCALARBYTES();
    }
    public static  int crypto_secretbox_xchacha20poly1305_KEYBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_KEYBYTES();
    }
    public static  int crypto_secretbox_xchacha20poly1305_NONCEBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_NONCEBYTES();
    }
    public static  int crypto_secretbox_xchacha20poly1305_MACBYTES() {
        return sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_MACBYTES();
    }
    public static  long crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_BYTES_MIN() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_BYTES_MIN();
    }
    public static  long crypto_pwhash_scryptsalsa208sha256_BYTES_MAX() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_BYTES_MAX();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN();
    }
    public static  long crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_SALTBYTES() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_SALTBYTES();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_STRBYTES() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_STRBYTES();
    }
    public static  MemorySegment crypto_pwhash_scryptsalsa208sha256_STRPREFIX() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_STRPREFIX();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN();
    }
    public static  long crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE();
    }
    public static  int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE() {
        return sodium_h_constants_1.crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE();
    }
    public static  int crypto_stream_salsa2012_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_salsa2012_KEYBYTES();
    }
    public static  int crypto_stream_salsa2012_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_salsa2012_NONCEBYTES();
    }
    public static  long crypto_stream_salsa2012_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_salsa2012_MESSAGEBYTES_MAX();
    }
    public static  int crypto_stream_salsa208_KEYBYTES() {
        return sodium_h_constants_1.crypto_stream_salsa208_KEYBYTES();
    }
    public static  int crypto_stream_salsa208_NONCEBYTES() {
        return sodium_h_constants_1.crypto_stream_salsa208_NONCEBYTES();
    }
    public static  long crypto_stream_salsa208_MESSAGEBYTES_MAX() {
        return sodium_h_constants_1.crypto_stream_salsa208_MESSAGEBYTES_MAX();
    }
}


