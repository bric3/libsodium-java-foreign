/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.bric3.sodium;

import com.github.bric3.libsodium.sodium_h;
import jdk.incubator.foreign.*;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodType;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;

import static jdk.incubator.foreign.CLinker.*;

/**
 * On macos when the library is installed via brew, there is a symlink
 * in the <code>/usr/local/opt</code> folder.
 *
 * <pre><code>
 * $ brew install libsodium
 * $ ls -lh /usr/local/Cellar/libsodium/1.0.18_1/lib/libsodium.23.dylib
 * .r--r--r--  352k bric3 16 Feb 22:16  /usr/local/Cellar/libsodium/1.0.18_1/lib/libsodium.23.dylib
 * $ ls -lh /usr/local/opt/libsodium/lib/libsodium.23.dylib
 * .r--r--r--  352k bric3 16 Feb 22:16  /usr/local/opt/libsodium/lib/libsodium.23.dylib
 * </code></pre>
 *
 *
 */
public class Libsodium {

    private final SymbolLookup libsodiumLookup;

//    static SymbolLookup lookup() {
//        SymbolLookup loaderLookup = SymbolLookup.loaderLookup();
//        SymbolLookup systemLookup = CLinker.systemLookup();
//        return name -> loaderLookup.lookup(name).or(() -> systemLookup.lookup(name));
//    }

    private Libsodium(String libraryName) {
        System.loadLibrary("sodium");
        libsodiumLookup = SymbolLookup.loaderLookup();
    }

    private Libsodium(Path libsodiumPath) {
        System.load(libsodiumPath.toAbsolutePath().toString());
        libsodiumLookup = SymbolLookup.loaderLookup();
    }

    private Libsodium(SymbolLookup libsodiumLookup) {
        this.libsodiumLookup = libsodiumLookup;
    }

    /**
     * Library name.
     * <p>
     * The given name will be mapped internally by
     * {@code java.lang.System#mapLibraryName(java.lang.String)},
     * that means it should be the name without <code>JNI_PREFIX</code>
     * and <code>JNI_SUFFIX</code> which are platform sensitive.
     *
     * @param libraryName The library name
     */
    public static Libsodium withName(String libraryName) {
        return new Libsodium(libraryName);
    }

    /**
     * Library path.
     *
     * @param libsodiumPath The path to the library
     */
    public static Libsodium withPath(Path libsodiumPath) {
        return new Libsodium(libsodiumPath);
    }

    /**
     * Library path.
     *
     * @param symbolLookup The path to the library
     */
    public static Libsodium withLookup(SymbolLookup symbolLookup) {
        return new Libsodium(symbolLookup);
    }

    public Libsodium ofJextract() {
        return new JextractedLibsodium(libsodiumLookup);
    }


    public int crypto_box_sealbytes() throws Throwable {
        // size_t crypto_box_sealbytes(void);
        MethodHandle crypto_box_sealbytes =
                CLinker.getInstance()
                       .downcallHandle(
                               libsodiumLookup.lookup("crypto_box_sealbytes").get(),
                               MethodType.methodType(int.class),
                               FunctionDescriptor.of(C_INT)
                       );

        return (int) crypto_box_sealbytes.invokeExact();
    }

    public int crypto_box_publickeybytes() throws Throwable {
        // size_t  crypto_box_publickeybytes(void);
        MethodHandle crypto_box_sealbytes =
                CLinker.getInstance()
                       .downcallHandle(
                               libsodiumLookup.lookup("crypto_box_publickeybytes").get(),
                               MethodType.methodType(int.class),
                               FunctionDescriptor.of(C_INT)
                       );

        return (int) crypto_box_sealbytes.invokeExact();
    }

    public int crypto_box_secretkeybytes() throws Throwable {
        // crypto_box_secretkeybytes(void);
        MethodHandle crypto_box_sealbytes =
                CLinker.getInstance()
                       .downcallHandle(
                               libsodiumLookup.lookup("crypto_box_secretkeybytes").get(),
                               MethodType.methodType(int.class),
                               FunctionDescriptor.of(C_INT)
                       );

        return (int) crypto_box_sealbytes.invokeExact();
    }

    public CryptoBoxKeyPair crypto_box_keypair() throws Throwable {
        // int crypto_box_keypair(unsigned char *pk, unsigned char *sk)
        // __attribute__ ((nonnull));

        MethodHandle crypto_box_keypair =
                CLinker.getInstance().downcallHandle(
                        libsodiumLookup.lookup("crypto_box_keypair").get(),
                        MethodType.methodType(
                                void.class,
                                MemoryAddress.class, // pk
                                MemoryAddress.class  // sk
                        ),
                        FunctionDescriptor.ofVoid(C_POINTER, C_POINTER)
                );

        try (var scope = ResourceScope.newConfinedScope()) {
            var segmentAllocator = SegmentAllocator.ofScope(scope);
            var recipientPublicKey = segmentAllocator.allocate(crypto_box_publickeybytes());
            var recipientSecretKey = segmentAllocator.allocate(crypto_box_secretkeybytes());

            crypto_box_keypair.invokeExact(recipientPublicKey.address(),
                                           recipientSecretKey.address());

            return new CryptoBoxKeyPair(
                    recipientPublicKey.toByteArray(),
                    recipientSecretKey.toByteArray()
            );
        }
    }


    public byte[] crypto_box_seal(String message,
                                  byte[] publicKey
    ) throws Throwable {
        var crypto_box_seal = CLinker.getInstance().downcallHandle(
                libsodiumLookup.lookup("crypto_box_seal").get(),
                // src/libsodium/include/sodium/crypto_box.h
                // SODIUM_EXPORT
                // int crypto_box_seal(unsigned char *c, const unsigned char *m,
                //                    unsigned long long mlen, const unsigned char *pk)
                //            __attribute__ ((nonnull(1, 4)));
                //
                // "(
                //   Ljdk/incubator/foreign/MemoryAddress;
                //   Ljdk/incubator/foreign/MemoryAddress;
                //   J
                //   Ljdk/incubator/foreign/MemoryAddress;
                // )"
                //
                // c.address(), m.address(), mlen, pk.address()
                MethodType.methodType(int.class,
                                      MemoryAddress.class, // cipherText, output buffer
                                      MemoryAddress.class, // message
                                      long.class,          // message length
                                      MemoryAddress.class  // publicKey
                ),
                FunctionDescriptor.of(C_INT,
                                      C_POINTER,
                                      C_POINTER,
                                      C_LONG_LONG,
                                      C_POINTER)

        );

        try (var scope = ResourceScope.newConfinedScope()) {
            var segmentAllocator = SegmentAllocator.ofScope(scope);
            var nativeMessage = CLinker.toCString(message, scope);
            var cipherText = segmentAllocator.allocate(crypto_box_sealbytes() + nativeMessage.byteSize());
            var ret = (int) crypto_box_seal.invokeExact(
                    cipherText.address(),
                    nativeMessage.address(),
                    (long) nativeMessage.byteSize(),
                    segmentAllocator.allocateArray(C_CHAR, publicKey).address());
            return cipherText.toByteArray();
        }
    }

    public String crypto_box_seal_open(byte[] cipherText,
                                       byte[] publicKey,
                                       byte[] secretKey
    ) throws Throwable {

        var crypto_box_seal_open = getInstance().downcallHandle(
                libsodiumLookup.lookup("crypto_box_seal_open").get(),
                // "(Ljdk/incubator/foreign/MemoryAddress;
                //   Ljdk/incubator/foreign/MemoryAddress;
                //   J
                //   Ljdk/incubator/foreign/MemoryAddress;
                //   Ljdk/incubator/foreign/MemoryAddress;)I"
                MethodType.methodType(int.class,
                                      MemoryAddress.class, // message
                                      MemoryAddress.class, // cipherText
                                      long.class,          // cipherText.length
                                      MemoryAddress.class, // public key
                                      MemoryAddress.class  // secret key
                ),
                FunctionDescriptor.of(C_INT,
                                      C_POINTER,
                                      C_POINTER,
                                      C_LONG_LONG,
                                      C_POINTER,
                                      C_POINTER
                )
        );

        try (var scope = ResourceScope.newConfinedScope()) {
            var segmentAllocator = SegmentAllocator.arenaAllocator(scope);
            var decipheredText = segmentAllocator.allocateArray(C_CHAR, cipherText.length - crypto_box_sealbytes());
            var ret = (int) crypto_box_seal_open.invokeExact(decipheredText.address(),
                                                             segmentAllocator.allocateArray(C_CHAR, cipherText).address(),
                                                             (long) cipherText.length,
                                                             segmentAllocator.allocateArray(C_CHAR, publicKey).address(),
                                                             segmentAllocator.allocateArray(C_CHAR, secretKey).address());

            return CLinker.toJavaString(decipheredText);
        }
    }

    public long c_strlen_smokeTest(String str, Charset charset) throws Throwable {
        MethodHandle strlen = CLinker.getInstance()
                                     .downcallHandle(
                                             CLinker.systemLookup().lookup("strlen").get(),
                                             MethodType.methodType(long.class, MemoryAddress.class),
                                             FunctionDescriptor.of(C_LONG, C_POINTER)
                                     );

        try (var scope = ResourceScope.newConfinedScope()) {
            return (long) strlen.invokeExact(CLinker.toCString(str, scope).address());
        }
    }



    private class JextractedLibsodium extends Libsodium {
        private JextractedLibsodium(String libraryName) {
            super(libraryName);
        }

        private JextractedLibsodium(Path libsodiumPath) {
            super(libsodiumPath);
        }

        public JextractedLibsodium(SymbolLookup libsodiumLookup) {
            super(libsodiumLookup);
        }


        @Override
        public CryptoBoxKeyPair crypto_box_keypair() {
            try (var scope = ResourceScope.newConfinedScope()) {
                var segmentAllocator = SegmentAllocator.ofScope(scope);
                var recipientPublicKey = segmentAllocator.allocate(sodium_h.crypto_box_PUBLICKEYBYTES());
                var recipientSecretKey = segmentAllocator.allocate(sodium_h.crypto_box_SECRETKEYBYTES());

                sodium_h.crypto_box_keypair(recipientPublicKey, recipientSecretKey);

                return new CryptoBoxKeyPair(
                        recipientPublicKey.toByteArray(),
                        recipientSecretKey.toByteArray()
                );
            }
        }

        @Override
        public byte[] crypto_box_seal(String message,
                                      byte[] publicKey) {
            try (var scope = ResourceScope.newConfinedScope()) {
                var segmentAllocator = SegmentAllocator.ofScope(scope);
                var nativeMessage = CLinker.toCString(message, scope);
                var cipherText = segmentAllocator.allocate(sodium_h.crypto_box_SEALBYTES() + nativeMessage.byteSize());
                sodium_h.crypto_box_seal(cipherText.address(),
                                         CLinker.toCString(message, scope).address(),
                                         nativeMessage.byteSize(),
                                         segmentAllocator.allocateArray(C_CHAR, publicKey).address());
                return cipherText.toByteArray();
            }
        }

        public String crypto_box_seal_open(byte[] cipherText,
                                           byte[] publicKey,
                                           byte[] secretKey) {
            try (var scope = ResourceScope.newConfinedScope()) {
                var segmentAllocator = SegmentAllocator.ofScope(scope);
                var decipheredText = segmentAllocator.allocateArray(C_CHAR, cipherText.length - sodium_h.crypto_box_SEALBYTES());
                sodium_h.crypto_box_seal_open(decipheredText.address(),
                                              segmentAllocator.allocateArray(C_CHAR, cipherText).address(),
                                              cipherText.length,
                                              segmentAllocator.allocateArray(C_CHAR, publicKey).address(),
                                              segmentAllocator.allocateArray(C_CHAR, secretKey).address());

                return CLinker.toJavaString(decipheredText);
            }
        }
    }
}
