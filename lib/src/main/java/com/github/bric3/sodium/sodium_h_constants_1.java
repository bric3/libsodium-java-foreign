// Generated by jextract

package com.github.bric3.sodium;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.util.Objects;
import jdk.incubator.foreign.*;
import jdk.incubator.foreign.MemoryLayout.PathElement;
import static jdk.incubator.foreign.CLinker.*;
class sodium_h_constants_1 extends sodium_h_constants_0 {

    /* package-private */ sodium_h_constants_1() {}
    static final FunctionDescriptor sodium_runtime_has_sse41$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor sodium_runtime_has_sse41$FUNC() { return sodium_runtime_has_sse41$FUNC_; }

    static final MethodHandle sodium_runtime_has_sse41$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_runtime_has_sse41",
        "()I",
        sodium_runtime_has_sse41$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_runtime_has_sse41$MH() { return sodium_runtime_has_sse41$MH_; }

    static final FunctionDescriptor sodium_runtime_has_avx$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor sodium_runtime_has_avx$FUNC() { return sodium_runtime_has_avx$FUNC_; }

    static final MethodHandle sodium_runtime_has_avx$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_runtime_has_avx",
        "()I",
        sodium_runtime_has_avx$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_runtime_has_avx$MH() { return sodium_runtime_has_avx$MH_; }

    static final FunctionDescriptor sodium_runtime_has_avx2$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor sodium_runtime_has_avx2$FUNC() { return sodium_runtime_has_avx2$FUNC_; }

    static final MethodHandle sodium_runtime_has_avx2$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_runtime_has_avx2",
        "()I",
        sodium_runtime_has_avx2$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_runtime_has_avx2$MH() { return sodium_runtime_has_avx2$MH_; }

    static final FunctionDescriptor sodium_runtime_has_avx512f$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor sodium_runtime_has_avx512f$FUNC() { return sodium_runtime_has_avx512f$FUNC_; }

    static final MethodHandle sodium_runtime_has_avx512f$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_runtime_has_avx512f",
        "()I",
        sodium_runtime_has_avx512f$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_runtime_has_avx512f$MH() { return sodium_runtime_has_avx512f$MH_; }

    static final FunctionDescriptor sodium_runtime_has_pclmul$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor sodium_runtime_has_pclmul$FUNC() { return sodium_runtime_has_pclmul$FUNC_; }

    static final MethodHandle sodium_runtime_has_pclmul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_runtime_has_pclmul",
        "()I",
        sodium_runtime_has_pclmul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_runtime_has_pclmul$MH() { return sodium_runtime_has_pclmul$MH_; }

    static final FunctionDescriptor sodium_runtime_has_aesni$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor sodium_runtime_has_aesni$FUNC() { return sodium_runtime_has_aesni$FUNC_; }

    static final MethodHandle sodium_runtime_has_aesni$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_runtime_has_aesni",
        "()I",
        sodium_runtime_has_aesni$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_runtime_has_aesni$MH() { return sodium_runtime_has_aesni$MH_; }

    static final FunctionDescriptor sodium_runtime_has_rdrand$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor sodium_runtime_has_rdrand$FUNC() { return sodium_runtime_has_rdrand$FUNC_; }

    static final MethodHandle sodium_runtime_has_rdrand$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_runtime_has_rdrand",
        "()I",
        sodium_runtime_has_rdrand$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_runtime_has_rdrand$MH() { return sodium_runtime_has_rdrand$MH_; }

    static final FunctionDescriptor _sodium_runtime_get_cpu_features$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor _sodium_runtime_get_cpu_features$FUNC() { return _sodium_runtime_get_cpu_features$FUNC_; }

    static final MethodHandle _sodium_runtime_get_cpu_features$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_sodium_runtime_get_cpu_features",
        "()I",
        _sodium_runtime_get_cpu_features$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _sodium_runtime_get_cpu_features$MH() { return _sodium_runtime_get_cpu_features$MH_; }

    static final FunctionDescriptor sodium_memzero$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_memzero$FUNC() { return sodium_memzero$FUNC_; }

    static final MethodHandle sodium_memzero$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_memzero",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        sodium_memzero$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_memzero$MH() { return sodium_memzero$MH_; }

    static final FunctionDescriptor sodium_stackzero$FUNC_ = FunctionDescriptor.ofVoid(
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_stackzero$FUNC() { return sodium_stackzero$FUNC_; }

    static final MethodHandle sodium_stackzero$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_stackzero",
        "(J)V",
        sodium_stackzero$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_stackzero$MH() { return sodium_stackzero$MH_; }

    static final FunctionDescriptor sodium_memcmp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_memcmp$FUNC() { return sodium_memcmp$FUNC_; }

    static final MethodHandle sodium_memcmp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_memcmp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        sodium_memcmp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_memcmp$MH() { return sodium_memcmp$MH_; }

    static final FunctionDescriptor sodium_compare$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_compare$FUNC() { return sodium_compare$FUNC_; }

    static final MethodHandle sodium_compare$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_compare",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        sodium_compare$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_compare$MH() { return sodium_compare$MH_; }

    static final FunctionDescriptor sodium_is_zero$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_is_zero$FUNC() { return sodium_is_zero$FUNC_; }

    static final MethodHandle sodium_is_zero$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_is_zero",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        sodium_is_zero$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_is_zero$MH() { return sodium_is_zero$MH_; }

    static final FunctionDescriptor sodium_increment$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_increment$FUNC() { return sodium_increment$FUNC_; }

    static final MethodHandle sodium_increment$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_increment",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        sodium_increment$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_increment$MH() { return sodium_increment$MH_; }

    static final FunctionDescriptor sodium_add$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_add$FUNC() { return sodium_add$FUNC_; }

    static final MethodHandle sodium_add$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_add",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        sodium_add$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_add$MH() { return sodium_add$MH_; }

    static final FunctionDescriptor sodium_sub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_sub$FUNC() { return sodium_sub$FUNC_; }

    static final MethodHandle sodium_sub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_sub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)V",
        sodium_sub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_sub$MH() { return sodium_sub$MH_; }

    static final FunctionDescriptor sodium_bin2hex$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_bin2hex$FUNC() { return sodium_bin2hex$FUNC_; }

    static final MethodHandle sodium_bin2hex$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_bin2hex",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;J)Ljdk/incubator/foreign/MemoryAddress;",
        sodium_bin2hex$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_bin2hex$MH() { return sodium_bin2hex$MH_; }

    static final FunctionDescriptor sodium_hex2bin$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_hex2bin$FUNC() { return sodium_hex2bin$FUNC_; }

    static final MethodHandle sodium_hex2bin$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_hex2bin",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        sodium_hex2bin$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_hex2bin$MH() { return sodium_hex2bin$MH_; }

    static final FunctionDescriptor sodium_base64_encoded_len$FUNC_ = FunctionDescriptor.of(C_LONG,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_base64_encoded_len$FUNC() { return sodium_base64_encoded_len$FUNC_; }

    static final MethodHandle sodium_base64_encoded_len$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_base64_encoded_len",
        "(JI)J",
        sodium_base64_encoded_len$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_base64_encoded_len$MH() { return sodium_base64_encoded_len$MH_; }

    static final FunctionDescriptor sodium_bin2base64$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_bin2base64$FUNC() { return sodium_bin2base64$FUNC_; }

    static final MethodHandle sodium_bin2base64$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_bin2base64",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JI)Ljdk/incubator/foreign/MemoryAddress;",
        sodium_bin2base64$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_bin2base64$MH() { return sodium_bin2base64$MH_; }

    static final FunctionDescriptor sodium_base642bin$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_INT
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_base642bin$FUNC() { return sodium_base642bin$FUNC_; }

    static final MethodHandle sodium_base642bin$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_base642bin",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
        sodium_base642bin$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_base642bin$MH() { return sodium_base642bin$MH_; }

    static final FunctionDescriptor sodium_mlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_mlock$FUNC() { return sodium_mlock$FUNC_; }

    static final MethodHandle sodium_mlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_mlock",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        sodium_mlock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_mlock$MH() { return sodium_mlock$MH_; }

    static final FunctionDescriptor sodium_munlock$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_munlock$FUNC() { return sodium_munlock$FUNC_; }

    static final MethodHandle sodium_munlock$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_munlock",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        sodium_munlock$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_munlock$MH() { return sodium_munlock$MH_; }

    static final FunctionDescriptor sodium_malloc$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_malloc$FUNC() { return sodium_malloc$FUNC_; }

    static final MethodHandle sodium_malloc$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_malloc",
        "(J)Ljdk/incubator/foreign/MemoryAddress;",
        sodium_malloc$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_malloc$MH() { return sodium_malloc$MH_; }

    static final FunctionDescriptor sodium_allocarray$FUNC_ = FunctionDescriptor.of(C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_allocarray$FUNC() { return sodium_allocarray$FUNC_; }

    static final MethodHandle sodium_allocarray$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_allocarray",
        "(JJ)Ljdk/incubator/foreign/MemoryAddress;",
        sodium_allocarray$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_allocarray$MH() { return sodium_allocarray$MH_; }

    static final FunctionDescriptor sodium_free$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_free$FUNC() { return sodium_free$FUNC_; }

    static final MethodHandle sodium_free$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_free",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        sodium_free$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_free$MH() { return sodium_free$MH_; }

    static final FunctionDescriptor sodium_mprotect_noaccess$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_mprotect_noaccess$FUNC() { return sodium_mprotect_noaccess$FUNC_; }

    static final MethodHandle sodium_mprotect_noaccess$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_mprotect_noaccess",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        sodium_mprotect_noaccess$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_mprotect_noaccess$MH() { return sodium_mprotect_noaccess$MH_; }

    static final FunctionDescriptor sodium_mprotect_readonly$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_mprotect_readonly$FUNC() { return sodium_mprotect_readonly$FUNC_; }

    static final MethodHandle sodium_mprotect_readonly$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_mprotect_readonly",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        sodium_mprotect_readonly$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_mprotect_readonly$MH() { return sodium_mprotect_readonly$MH_; }

    static final FunctionDescriptor sodium_mprotect_readwrite$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_mprotect_readwrite$FUNC() { return sodium_mprotect_readwrite$FUNC_; }

    static final MethodHandle sodium_mprotect_readwrite$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_mprotect_readwrite",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        sodium_mprotect_readwrite$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_mprotect_readwrite$MH() { return sodium_mprotect_readwrite$MH_; }

    static final FunctionDescriptor sodium_pad$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_pad$FUNC() { return sodium_pad$FUNC_; }

    static final MethodHandle sodium_pad$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_pad",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJJ)I",
        sodium_pad$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_pad$MH() { return sodium_pad$MH_; }

    static final FunctionDescriptor sodium_unpad$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor sodium_unpad$FUNC() { return sodium_unpad$FUNC_; }

    static final MethodHandle sodium_unpad$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "sodium_unpad",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJ)I",
        sodium_unpad$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle sodium_unpad$MH() { return sodium_unpad$MH_; }

    static final FunctionDescriptor _sodium_alloc_init$FUNC_ = FunctionDescriptor.of(C_INT);
    static final jdk.incubator.foreign.FunctionDescriptor _sodium_alloc_init$FUNC() { return _sodium_alloc_init$FUNC_; }

    static final MethodHandle _sodium_alloc_init$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "_sodium_alloc_init",
        "()I",
        _sodium_alloc_init$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle _sodium_alloc_init$MH() { return _sodium_alloc_init$MH_; }

    static final FunctionDescriptor crypto_stream_xchacha20_keybytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_xchacha20_keybytes$FUNC() { return crypto_stream_xchacha20_keybytes$FUNC_; }

    static final MethodHandle crypto_stream_xchacha20_keybytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_xchacha20_keybytes",
        "()J",
        crypto_stream_xchacha20_keybytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_xchacha20_keybytes$MH() { return crypto_stream_xchacha20_keybytes$MH_; }

    static final FunctionDescriptor crypto_stream_xchacha20_noncebytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_xchacha20_noncebytes$FUNC() { return crypto_stream_xchacha20_noncebytes$FUNC_; }

    static final MethodHandle crypto_stream_xchacha20_noncebytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_xchacha20_noncebytes",
        "()J",
        crypto_stream_xchacha20_noncebytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_xchacha20_noncebytes$MH() { return crypto_stream_xchacha20_noncebytes$MH_; }

    static final FunctionDescriptor crypto_stream_xchacha20_messagebytes_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_xchacha20_messagebytes_max$FUNC() { return crypto_stream_xchacha20_messagebytes_max$FUNC_; }

    static final MethodHandle crypto_stream_xchacha20_messagebytes_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_xchacha20_messagebytes_max",
        "()J",
        crypto_stream_xchacha20_messagebytes_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_xchacha20_messagebytes_max$MH() { return crypto_stream_xchacha20_messagebytes_max$MH_; }

    static final FunctionDescriptor crypto_stream_xchacha20$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_xchacha20$FUNC() { return crypto_stream_xchacha20$FUNC_; }

    static final MethodHandle crypto_stream_xchacha20$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_xchacha20",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_stream_xchacha20$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_xchacha20$MH() { return crypto_stream_xchacha20$MH_; }

    static final FunctionDescriptor crypto_stream_xchacha20_xor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_xchacha20_xor$FUNC() { return crypto_stream_xchacha20_xor$FUNC_; }

    static final MethodHandle crypto_stream_xchacha20_xor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_xchacha20_xor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_stream_xchacha20_xor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_xchacha20_xor$MH() { return crypto_stream_xchacha20_xor$MH_; }

    static final FunctionDescriptor crypto_stream_xchacha20_xor_ic$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_xchacha20_xor_ic$FUNC() { return crypto_stream_xchacha20_xor_ic$FUNC_; }

    static final MethodHandle crypto_stream_xchacha20_xor_ic$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_xchacha20_xor_ic",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        crypto_stream_xchacha20_xor_ic$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_xchacha20_xor_ic$MH() { return crypto_stream_xchacha20_xor_ic$MH_; }

    static final FunctionDescriptor crypto_stream_xchacha20_keygen$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_xchacha20_keygen$FUNC() { return crypto_stream_xchacha20_keygen$FUNC_; }

    static final MethodHandle crypto_stream_xchacha20_keygen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_xchacha20_keygen",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_stream_xchacha20_keygen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_xchacha20_keygen$MH() { return crypto_stream_xchacha20_keygen$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seedbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seedbytes$FUNC() { return crypto_box_curve25519xchacha20poly1305_seedbytes$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_seedbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_seedbytes",
        "()J",
        crypto_box_curve25519xchacha20poly1305_seedbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_seedbytes$MH() { return crypto_box_curve25519xchacha20poly1305_seedbytes$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_publickeybytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_publickeybytes$FUNC() { return crypto_box_curve25519xchacha20poly1305_publickeybytes$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_publickeybytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_publickeybytes",
        "()J",
        crypto_box_curve25519xchacha20poly1305_publickeybytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_publickeybytes$MH() { return crypto_box_curve25519xchacha20poly1305_publickeybytes$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_secretkeybytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_secretkeybytes$FUNC() { return crypto_box_curve25519xchacha20poly1305_secretkeybytes$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_secretkeybytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_secretkeybytes",
        "()J",
        crypto_box_curve25519xchacha20poly1305_secretkeybytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_secretkeybytes$MH() { return crypto_box_curve25519xchacha20poly1305_secretkeybytes$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_beforenmbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_beforenmbytes$FUNC() { return crypto_box_curve25519xchacha20poly1305_beforenmbytes$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_beforenmbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_beforenmbytes",
        "()J",
        crypto_box_curve25519xchacha20poly1305_beforenmbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_beforenmbytes$MH() { return crypto_box_curve25519xchacha20poly1305_beforenmbytes$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_noncebytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_noncebytes$FUNC() { return crypto_box_curve25519xchacha20poly1305_noncebytes$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_noncebytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_noncebytes",
        "()J",
        crypto_box_curve25519xchacha20poly1305_noncebytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_noncebytes$MH() { return crypto_box_curve25519xchacha20poly1305_noncebytes$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_macbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_macbytes$FUNC() { return crypto_box_curve25519xchacha20poly1305_macbytes$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_macbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_macbytes",
        "()J",
        crypto_box_curve25519xchacha20poly1305_macbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_macbytes$MH() { return crypto_box_curve25519xchacha20poly1305_macbytes$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_messagebytes_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_messagebytes_max$FUNC() { return crypto_box_curve25519xchacha20poly1305_messagebytes_max$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_messagebytes_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_messagebytes_max",
        "()J",
        crypto_box_curve25519xchacha20poly1305_messagebytes_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_messagebytes_max$MH() { return crypto_box_curve25519xchacha20poly1305_messagebytes_max$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seed_keypair$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seed_keypair$FUNC() { return crypto_box_curve25519xchacha20poly1305_seed_keypair$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_seed_keypair$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_seed_keypair",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_seed_keypair$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_seed_keypair$MH() { return crypto_box_curve25519xchacha20poly1305_seed_keypair$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_keypair$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_keypair$FUNC() { return crypto_box_curve25519xchacha20poly1305_keypair$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_keypair$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_keypair",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_keypair$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_keypair$MH() { return crypto_box_curve25519xchacha20poly1305_keypair$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_easy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_easy$FUNC() { return crypto_box_curve25519xchacha20poly1305_easy$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_easy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_easy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_easy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_easy$MH() { return crypto_box_curve25519xchacha20poly1305_easy$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_easy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_easy$FUNC() { return crypto_box_curve25519xchacha20poly1305_open_easy$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_open_easy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_open_easy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_open_easy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_open_easy$MH() { return crypto_box_curve25519xchacha20poly1305_open_easy$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_detached$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_detached$FUNC() { return crypto_box_curve25519xchacha20poly1305_detached$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_detached$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_detached",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_detached$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_detached$MH() { return crypto_box_curve25519xchacha20poly1305_detached$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_detached$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_detached$FUNC() { return crypto_box_curve25519xchacha20poly1305_open_detached$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_open_detached$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_open_detached",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_open_detached$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_open_detached$MH() { return crypto_box_curve25519xchacha20poly1305_open_detached$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_beforenm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_beforenm$FUNC() { return crypto_box_curve25519xchacha20poly1305_beforenm$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_beforenm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_beforenm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_beforenm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_beforenm$MH() { return crypto_box_curve25519xchacha20poly1305_beforenm$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_easy_afternm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_easy_afternm$FUNC() { return crypto_box_curve25519xchacha20poly1305_easy_afternm$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_easy_afternm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_easy_afternm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_easy_afternm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_easy_afternm$MH() { return crypto_box_curve25519xchacha20poly1305_easy_afternm$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_easy_afternm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_easy_afternm$FUNC() { return crypto_box_curve25519xchacha20poly1305_open_easy_afternm$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_open_easy_afternm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_open_easy_afternm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_open_easy_afternm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_open_easy_afternm$MH() { return crypto_box_curve25519xchacha20poly1305_open_easy_afternm$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_detached_afternm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_detached_afternm$FUNC() { return crypto_box_curve25519xchacha20poly1305_detached_afternm$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_detached_afternm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_detached_afternm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_detached_afternm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_detached_afternm$MH() { return crypto_box_curve25519xchacha20poly1305_detached_afternm$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_detached_afternm$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_open_detached_afternm$FUNC() { return crypto_box_curve25519xchacha20poly1305_open_detached_afternm$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_open_detached_afternm$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_open_detached_afternm",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_open_detached_afternm$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_open_detached_afternm$MH() { return crypto_box_curve25519xchacha20poly1305_open_detached_afternm$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_sealbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_sealbytes$FUNC() { return crypto_box_curve25519xchacha20poly1305_sealbytes$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_sealbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_sealbytes",
        "()J",
        crypto_box_curve25519xchacha20poly1305_sealbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_sealbytes$MH() { return crypto_box_curve25519xchacha20poly1305_sealbytes$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seal$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seal$FUNC() { return crypto_box_curve25519xchacha20poly1305_seal$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_seal$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_seal",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_seal$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_seal$MH() { return crypto_box_curve25519xchacha20poly1305_seal$MH_; }

    static final FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seal_open$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_box_curve25519xchacha20poly1305_seal_open$FUNC() { return crypto_box_curve25519xchacha20poly1305_seal_open$FUNC_; }

    static final MethodHandle crypto_box_curve25519xchacha20poly1305_seal_open$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_box_curve25519xchacha20poly1305_seal_open",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_box_curve25519xchacha20poly1305_seal_open$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_box_curve25519xchacha20poly1305_seal_open$MH() { return crypto_box_curve25519xchacha20poly1305_seal_open$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_bytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_bytes$FUNC() { return crypto_core_ed25519_bytes$FUNC_; }

    static final MethodHandle crypto_core_ed25519_bytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_bytes",
        "()J",
        crypto_core_ed25519_bytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_bytes$MH() { return crypto_core_ed25519_bytes$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_uniformbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_uniformbytes$FUNC() { return crypto_core_ed25519_uniformbytes$FUNC_; }

    static final MethodHandle crypto_core_ed25519_uniformbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_uniformbytes",
        "()J",
        crypto_core_ed25519_uniformbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_uniformbytes$MH() { return crypto_core_ed25519_uniformbytes$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_hashbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_hashbytes$FUNC() { return crypto_core_ed25519_hashbytes$FUNC_; }

    static final MethodHandle crypto_core_ed25519_hashbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_hashbytes",
        "()J",
        crypto_core_ed25519_hashbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_hashbytes$MH() { return crypto_core_ed25519_hashbytes$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalarbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalarbytes$FUNC() { return crypto_core_ed25519_scalarbytes$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalarbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalarbytes",
        "()J",
        crypto_core_ed25519_scalarbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalarbytes$MH() { return crypto_core_ed25519_scalarbytes$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_nonreducedscalarbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_nonreducedscalarbytes$FUNC() { return crypto_core_ed25519_nonreducedscalarbytes$FUNC_; }

    static final MethodHandle crypto_core_ed25519_nonreducedscalarbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_nonreducedscalarbytes",
        "()J",
        crypto_core_ed25519_nonreducedscalarbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_nonreducedscalarbytes$MH() { return crypto_core_ed25519_nonreducedscalarbytes$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_is_valid_point$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_is_valid_point$FUNC() { return crypto_core_ed25519_is_valid_point$FUNC_; }

    static final MethodHandle crypto_core_ed25519_is_valid_point$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_is_valid_point",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ed25519_is_valid_point$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_is_valid_point$MH() { return crypto_core_ed25519_is_valid_point$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_add$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_add$FUNC() { return crypto_core_ed25519_add$FUNC_; }

    static final MethodHandle crypto_core_ed25519_add$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_add",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ed25519_add$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_add$MH() { return crypto_core_ed25519_add$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_sub$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_sub$FUNC() { return crypto_core_ed25519_sub$FUNC_; }

    static final MethodHandle crypto_core_ed25519_sub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_sub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ed25519_sub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_sub$MH() { return crypto_core_ed25519_sub$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_from_uniform$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_from_uniform$FUNC() { return crypto_core_ed25519_from_uniform$FUNC_; }

    static final MethodHandle crypto_core_ed25519_from_uniform$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_from_uniform",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ed25519_from_uniform$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_from_uniform$MH() { return crypto_core_ed25519_from_uniform$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_from_hash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_from_hash$FUNC() { return crypto_core_ed25519_from_hash$FUNC_; }

    static final MethodHandle crypto_core_ed25519_from_hash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_from_hash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ed25519_from_hash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_from_hash$MH() { return crypto_core_ed25519_from_hash$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_random$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_random$FUNC() { return crypto_core_ed25519_random$FUNC_; }

    static final MethodHandle crypto_core_ed25519_random$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_random",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_random$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_random$MH() { return crypto_core_ed25519_random$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_random$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_random$FUNC() { return crypto_core_ed25519_scalar_random$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_random$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_random",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_scalar_random$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_random$MH() { return crypto_core_ed25519_scalar_random$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_invert$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_invert$FUNC() { return crypto_core_ed25519_scalar_invert$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_invert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_invert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ed25519_scalar_invert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_invert$MH() { return crypto_core_ed25519_scalar_invert$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_negate$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_negate$FUNC() { return crypto_core_ed25519_scalar_negate$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_negate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_negate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_scalar_negate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_negate$MH() { return crypto_core_ed25519_scalar_negate$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_complement$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_complement$FUNC() { return crypto_core_ed25519_scalar_complement$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_complement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_complement",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_scalar_complement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_complement$MH() { return crypto_core_ed25519_scalar_complement$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_add$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_add$FUNC() { return crypto_core_ed25519_scalar_add$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_add$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_add",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_scalar_add$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_add$MH() { return crypto_core_ed25519_scalar_add$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_sub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_sub$FUNC() { return crypto_core_ed25519_scalar_sub$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_sub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_sub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_scalar_sub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_sub$MH() { return crypto_core_ed25519_scalar_sub$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_mul$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_mul$FUNC() { return crypto_core_ed25519_scalar_mul$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_mul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_mul",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_scalar_mul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_mul$MH() { return crypto_core_ed25519_scalar_mul$MH_; }

    static final FunctionDescriptor crypto_core_ed25519_scalar_reduce$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ed25519_scalar_reduce$FUNC() { return crypto_core_ed25519_scalar_reduce$FUNC_; }

    static final MethodHandle crypto_core_ed25519_scalar_reduce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ed25519_scalar_reduce",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ed25519_scalar_reduce$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ed25519_scalar_reduce$MH() { return crypto_core_ed25519_scalar_reduce$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_bytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_bytes$FUNC() { return crypto_core_ristretto255_bytes$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_bytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_bytes",
        "()J",
        crypto_core_ristretto255_bytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_bytes$MH() { return crypto_core_ristretto255_bytes$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_hashbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_hashbytes$FUNC() { return crypto_core_ristretto255_hashbytes$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_hashbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_hashbytes",
        "()J",
        crypto_core_ristretto255_hashbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_hashbytes$MH() { return crypto_core_ristretto255_hashbytes$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalarbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalarbytes$FUNC() { return crypto_core_ristretto255_scalarbytes$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalarbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalarbytes",
        "()J",
        crypto_core_ristretto255_scalarbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalarbytes$MH() { return crypto_core_ristretto255_scalarbytes$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_nonreducedscalarbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_nonreducedscalarbytes$FUNC() { return crypto_core_ristretto255_nonreducedscalarbytes$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_nonreducedscalarbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_nonreducedscalarbytes",
        "()J",
        crypto_core_ristretto255_nonreducedscalarbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_nonreducedscalarbytes$MH() { return crypto_core_ristretto255_nonreducedscalarbytes$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_is_valid_point$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_is_valid_point$FUNC() { return crypto_core_ristretto255_is_valid_point$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_is_valid_point$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_is_valid_point",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ristretto255_is_valid_point$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_is_valid_point$MH() { return crypto_core_ristretto255_is_valid_point$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_add$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_add$FUNC() { return crypto_core_ristretto255_add$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_add$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_add",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ristretto255_add$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_add$MH() { return crypto_core_ristretto255_add$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_sub$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_sub$FUNC() { return crypto_core_ristretto255_sub$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_sub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_sub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ristretto255_sub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_sub$MH() { return crypto_core_ristretto255_sub$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_from_hash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_from_hash$FUNC() { return crypto_core_ristretto255_from_hash$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_from_hash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_from_hash",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ristretto255_from_hash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_from_hash$MH() { return crypto_core_ristretto255_from_hash$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_random$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_random$FUNC() { return crypto_core_ristretto255_random$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_random$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_random",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_random$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_random$MH() { return crypto_core_ristretto255_random$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_random$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_random$FUNC() { return crypto_core_ristretto255_scalar_random$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_random$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_random",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_scalar_random$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_random$MH() { return crypto_core_ristretto255_scalar_random$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_invert$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_invert$FUNC() { return crypto_core_ristretto255_scalar_invert$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_invert$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_invert",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_core_ristretto255_scalar_invert$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_invert$MH() { return crypto_core_ristretto255_scalar_invert$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_negate$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_negate$FUNC() { return crypto_core_ristretto255_scalar_negate$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_negate$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_negate",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_scalar_negate$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_negate$MH() { return crypto_core_ristretto255_scalar_negate$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_complement$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_complement$FUNC() { return crypto_core_ristretto255_scalar_complement$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_complement$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_complement",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_scalar_complement$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_complement$MH() { return crypto_core_ristretto255_scalar_complement$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_add$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_add$FUNC() { return crypto_core_ristretto255_scalar_add$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_add$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_add",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_scalar_add$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_add$MH() { return crypto_core_ristretto255_scalar_add$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_sub$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_sub$FUNC() { return crypto_core_ristretto255_scalar_sub$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_sub$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_sub",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_scalar_sub$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_sub$MH() { return crypto_core_ristretto255_scalar_sub$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_mul$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_mul$FUNC() { return crypto_core_ristretto255_scalar_mul$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_mul$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_mul",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_scalar_mul$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_mul$MH() { return crypto_core_ristretto255_scalar_mul$MH_; }

    static final FunctionDescriptor crypto_core_ristretto255_scalar_reduce$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_core_ristretto255_scalar_reduce$FUNC() { return crypto_core_ristretto255_scalar_reduce$FUNC_; }

    static final MethodHandle crypto_core_ristretto255_scalar_reduce$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_core_ristretto255_scalar_reduce",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_core_ristretto255_scalar_reduce$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_core_ristretto255_scalar_reduce$MH() { return crypto_core_ristretto255_scalar_reduce$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ed25519_bytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ed25519_bytes$FUNC() { return crypto_scalarmult_ed25519_bytes$FUNC_; }

    static final MethodHandle crypto_scalarmult_ed25519_bytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ed25519_bytes",
        "()J",
        crypto_scalarmult_ed25519_bytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ed25519_bytes$MH() { return crypto_scalarmult_ed25519_bytes$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ed25519_scalarbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ed25519_scalarbytes$FUNC() { return crypto_scalarmult_ed25519_scalarbytes$FUNC_; }

    static final MethodHandle crypto_scalarmult_ed25519_scalarbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ed25519_scalarbytes",
        "()J",
        crypto_scalarmult_ed25519_scalarbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ed25519_scalarbytes$MH() { return crypto_scalarmult_ed25519_scalarbytes$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ed25519$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ed25519$FUNC() { return crypto_scalarmult_ed25519$FUNC_; }

    static final MethodHandle crypto_scalarmult_ed25519$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ed25519",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_scalarmult_ed25519$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ed25519$MH() { return crypto_scalarmult_ed25519$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ed25519_noclamp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ed25519_noclamp$FUNC() { return crypto_scalarmult_ed25519_noclamp$FUNC_; }

    static final MethodHandle crypto_scalarmult_ed25519_noclamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ed25519_noclamp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_scalarmult_ed25519_noclamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ed25519_noclamp$MH() { return crypto_scalarmult_ed25519_noclamp$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ed25519_base$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ed25519_base$FUNC() { return crypto_scalarmult_ed25519_base$FUNC_; }

    static final MethodHandle crypto_scalarmult_ed25519_base$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ed25519_base",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_scalarmult_ed25519_base$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ed25519_base$MH() { return crypto_scalarmult_ed25519_base$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ed25519_base_noclamp$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ed25519_base_noclamp$FUNC() { return crypto_scalarmult_ed25519_base_noclamp$FUNC_; }

    static final MethodHandle crypto_scalarmult_ed25519_base_noclamp$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ed25519_base_noclamp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_scalarmult_ed25519_base_noclamp$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ed25519_base_noclamp$MH() { return crypto_scalarmult_ed25519_base_noclamp$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ristretto255_bytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ristretto255_bytes$FUNC() { return crypto_scalarmult_ristretto255_bytes$FUNC_; }

    static final MethodHandle crypto_scalarmult_ristretto255_bytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ristretto255_bytes",
        "()J",
        crypto_scalarmult_ristretto255_bytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ristretto255_bytes$MH() { return crypto_scalarmult_ristretto255_bytes$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ristretto255_scalarbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ristretto255_scalarbytes$FUNC() { return crypto_scalarmult_ristretto255_scalarbytes$FUNC_; }

    static final MethodHandle crypto_scalarmult_ristretto255_scalarbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ristretto255_scalarbytes",
        "()J",
        crypto_scalarmult_ristretto255_scalarbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ristretto255_scalarbytes$MH() { return crypto_scalarmult_ristretto255_scalarbytes$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ristretto255$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ristretto255$FUNC() { return crypto_scalarmult_ristretto255$FUNC_; }

    static final MethodHandle crypto_scalarmult_ristretto255$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ristretto255",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_scalarmult_ristretto255$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ristretto255$MH() { return crypto_scalarmult_ristretto255$MH_; }

    static final FunctionDescriptor crypto_scalarmult_ristretto255_base$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_scalarmult_ristretto255_base$FUNC() { return crypto_scalarmult_ristretto255_base$FUNC_; }

    static final MethodHandle crypto_scalarmult_ristretto255_base$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_scalarmult_ristretto255_base",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_scalarmult_ristretto255_base$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_scalarmult_ristretto255_base$MH() { return crypto_scalarmult_ristretto255_base$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_keybytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_keybytes$FUNC() { return crypto_secretbox_xchacha20poly1305_keybytes$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_keybytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_keybytes",
        "()J",
        crypto_secretbox_xchacha20poly1305_keybytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_keybytes$MH() { return crypto_secretbox_xchacha20poly1305_keybytes$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_noncebytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_noncebytes$FUNC() { return crypto_secretbox_xchacha20poly1305_noncebytes$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_noncebytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_noncebytes",
        "()J",
        crypto_secretbox_xchacha20poly1305_noncebytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_noncebytes$MH() { return crypto_secretbox_xchacha20poly1305_noncebytes$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_macbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_macbytes$FUNC() { return crypto_secretbox_xchacha20poly1305_macbytes$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_macbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_macbytes",
        "()J",
        crypto_secretbox_xchacha20poly1305_macbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_macbytes$MH() { return crypto_secretbox_xchacha20poly1305_macbytes$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_messagebytes_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_messagebytes_max$FUNC() { return crypto_secretbox_xchacha20poly1305_messagebytes_max$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_messagebytes_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_messagebytes_max",
        "()J",
        crypto_secretbox_xchacha20poly1305_messagebytes_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_messagebytes_max$MH() { return crypto_secretbox_xchacha20poly1305_messagebytes_max$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_easy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_easy$FUNC() { return crypto_secretbox_xchacha20poly1305_easy$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_easy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_easy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_secretbox_xchacha20poly1305_easy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_easy$MH() { return crypto_secretbox_xchacha20poly1305_easy$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_open_easy$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_open_easy$FUNC() { return crypto_secretbox_xchacha20poly1305_open_easy$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_open_easy$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_open_easy",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_secretbox_xchacha20poly1305_open_easy$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_open_easy$MH() { return crypto_secretbox_xchacha20poly1305_open_easy$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_detached$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_detached$FUNC() { return crypto_secretbox_xchacha20poly1305_detached$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_detached$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_detached",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_secretbox_xchacha20poly1305_detached$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_detached$MH() { return crypto_secretbox_xchacha20poly1305_detached$MH_; }

    static final FunctionDescriptor crypto_secretbox_xchacha20poly1305_open_detached$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_secretbox_xchacha20poly1305_open_detached$FUNC() { return crypto_secretbox_xchacha20poly1305_open_detached$FUNC_; }

    static final MethodHandle crypto_secretbox_xchacha20poly1305_open_detached$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_secretbox_xchacha20poly1305_open_detached",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_secretbox_xchacha20poly1305_open_detached$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_secretbox_xchacha20poly1305_open_detached$MH() { return crypto_secretbox_xchacha20poly1305_open_detached$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_bytes_min$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_bytes_min$FUNC() { return crypto_pwhash_scryptsalsa208sha256_bytes_min$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_bytes_min$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_bytes_min",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_bytes_min$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_bytes_min$MH() { return crypto_pwhash_scryptsalsa208sha256_bytes_min$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_bytes_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_bytes_max$FUNC() { return crypto_pwhash_scryptsalsa208sha256_bytes_max$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_bytes_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_bytes_max",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_bytes_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_bytes_max$MH() { return crypto_pwhash_scryptsalsa208sha256_bytes_max$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_passwd_min$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_passwd_min$FUNC() { return crypto_pwhash_scryptsalsa208sha256_passwd_min$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_passwd_min$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_passwd_min",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_passwd_min$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_passwd_min$MH() { return crypto_pwhash_scryptsalsa208sha256_passwd_min$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_passwd_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_passwd_max$FUNC() { return crypto_pwhash_scryptsalsa208sha256_passwd_max$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_passwd_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_passwd_max",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_passwd_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_passwd_max$MH() { return crypto_pwhash_scryptsalsa208sha256_passwd_max$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_saltbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_saltbytes$FUNC() { return crypto_pwhash_scryptsalsa208sha256_saltbytes$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_saltbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_saltbytes",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_saltbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_saltbytes$MH() { return crypto_pwhash_scryptsalsa208sha256_saltbytes$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_strbytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_strbytes$FUNC() { return crypto_pwhash_scryptsalsa208sha256_strbytes$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_strbytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_strbytes",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_strbytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_strbytes$MH() { return crypto_pwhash_scryptsalsa208sha256_strbytes$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_strprefix$FUNC_ = FunctionDescriptor.of(C_POINTER);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_strprefix$FUNC() { return crypto_pwhash_scryptsalsa208sha256_strprefix$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_strprefix$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_strprefix",
        "()Ljdk/incubator/foreign/MemoryAddress;",
        crypto_pwhash_scryptsalsa208sha256_strprefix$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_strprefix$MH() { return crypto_pwhash_scryptsalsa208sha256_strprefix$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_min$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_min$FUNC() { return crypto_pwhash_scryptsalsa208sha256_opslimit_min$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_min$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_opslimit_min",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_opslimit_min$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_min$MH() { return crypto_pwhash_scryptsalsa208sha256_opslimit_min$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_max$FUNC() { return crypto_pwhash_scryptsalsa208sha256_opslimit_max$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_opslimit_max",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_opslimit_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_max$MH() { return crypto_pwhash_scryptsalsa208sha256_opslimit_max$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_min$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_min$FUNC() { return crypto_pwhash_scryptsalsa208sha256_memlimit_min$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_min$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_memlimit_min",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_memlimit_min$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_min$MH() { return crypto_pwhash_scryptsalsa208sha256_memlimit_min$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_max$FUNC() { return crypto_pwhash_scryptsalsa208sha256_memlimit_max$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_memlimit_max",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_memlimit_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_max$MH() { return crypto_pwhash_scryptsalsa208sha256_memlimit_max$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$FUNC() { return crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_opslimit_interactive",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$MH() { return crypto_pwhash_scryptsalsa208sha256_opslimit_interactive$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$FUNC() { return crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_memlimit_interactive",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$MH() { return crypto_pwhash_scryptsalsa208sha256_memlimit_interactive$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$FUNC() { return crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$MH() { return crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$FUNC() { return crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive",
        "()J",
        crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$MH() { return crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_LONG_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256$FUNC() { return crypto_pwhash_scryptsalsa208sha256$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JJ)I",
        crypto_pwhash_scryptsalsa208sha256$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256$MH() { return crypto_pwhash_scryptsalsa208sha256$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_str$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_LONG_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_str$FUNC() { return crypto_pwhash_scryptsalsa208sha256_str$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_str$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_str",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JJJ)I",
        crypto_pwhash_scryptsalsa208sha256_str$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_str$MH() { return crypto_pwhash_scryptsalsa208sha256_str$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_str_verify$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_str_verify$FUNC() { return crypto_pwhash_scryptsalsa208sha256_str_verify$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_str_verify$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_str_verify",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;J)I",
        crypto_pwhash_scryptsalsa208sha256_str_verify$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_str_verify$MH() { return crypto_pwhash_scryptsalsa208sha256_str_verify$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_ll$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_INT,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_ll$FUNC() { return crypto_pwhash_scryptsalsa208sha256_ll$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_ll$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_ll",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;JJIILjdk/incubator/foreign/MemoryAddress;J)I",
        crypto_pwhash_scryptsalsa208sha256_ll$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_ll$MH() { return crypto_pwhash_scryptsalsa208sha256_ll$MH_; }

    static final FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_LONG
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$FUNC() { return crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$FUNC_; }

    static final MethodHandle crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_pwhash_scryptsalsa208sha256_str_needs_rehash",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)I",
        crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$MH() { return crypto_pwhash_scryptsalsa208sha256_str_needs_rehash$MH_; }

    static final FunctionDescriptor crypto_stream_salsa2012_keybytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa2012_keybytes$FUNC() { return crypto_stream_salsa2012_keybytes$FUNC_; }

    static final MethodHandle crypto_stream_salsa2012_keybytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa2012_keybytes",
        "()J",
        crypto_stream_salsa2012_keybytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa2012_keybytes$MH() { return crypto_stream_salsa2012_keybytes$MH_; }

    static final FunctionDescriptor crypto_stream_salsa2012_noncebytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa2012_noncebytes$FUNC() { return crypto_stream_salsa2012_noncebytes$FUNC_; }

    static final MethodHandle crypto_stream_salsa2012_noncebytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa2012_noncebytes",
        "()J",
        crypto_stream_salsa2012_noncebytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa2012_noncebytes$MH() { return crypto_stream_salsa2012_noncebytes$MH_; }

    static final FunctionDescriptor crypto_stream_salsa2012_messagebytes_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa2012_messagebytes_max$FUNC() { return crypto_stream_salsa2012_messagebytes_max$FUNC_; }

    static final MethodHandle crypto_stream_salsa2012_messagebytes_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa2012_messagebytes_max",
        "()J",
        crypto_stream_salsa2012_messagebytes_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa2012_messagebytes_max$MH() { return crypto_stream_salsa2012_messagebytes_max$MH_; }

    static final FunctionDescriptor crypto_stream_salsa2012$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa2012$FUNC() { return crypto_stream_salsa2012$FUNC_; }

    static final MethodHandle crypto_stream_salsa2012$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa2012",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_stream_salsa2012$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa2012$MH() { return crypto_stream_salsa2012$MH_; }

    static final FunctionDescriptor crypto_stream_salsa2012_xor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa2012_xor$FUNC() { return crypto_stream_salsa2012_xor$FUNC_; }

    static final MethodHandle crypto_stream_salsa2012_xor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa2012_xor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_stream_salsa2012_xor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa2012_xor$MH() { return crypto_stream_salsa2012_xor$MH_; }

    static final FunctionDescriptor crypto_stream_salsa2012_keygen$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa2012_keygen$FUNC() { return crypto_stream_salsa2012_keygen$FUNC_; }

    static final MethodHandle crypto_stream_salsa2012_keygen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa2012_keygen",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_stream_salsa2012_keygen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa2012_keygen$MH() { return crypto_stream_salsa2012_keygen$MH_; }

    static final FunctionDescriptor crypto_stream_salsa208_keybytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa208_keybytes$FUNC() { return crypto_stream_salsa208_keybytes$FUNC_; }

    static final MethodHandle crypto_stream_salsa208_keybytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa208_keybytes",
        "()J",
        crypto_stream_salsa208_keybytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa208_keybytes$MH() { return crypto_stream_salsa208_keybytes$MH_; }

    static final FunctionDescriptor crypto_stream_salsa208_noncebytes$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa208_noncebytes$FUNC() { return crypto_stream_salsa208_noncebytes$FUNC_; }

    static final MethodHandle crypto_stream_salsa208_noncebytes$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa208_noncebytes",
        "()J",
        crypto_stream_salsa208_noncebytes$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa208_noncebytes$MH() { return crypto_stream_salsa208_noncebytes$MH_; }

    static final FunctionDescriptor crypto_stream_salsa208_messagebytes_max$FUNC_ = FunctionDescriptor.of(C_LONG);
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa208_messagebytes_max$FUNC() { return crypto_stream_salsa208_messagebytes_max$FUNC_; }

    static final MethodHandle crypto_stream_salsa208_messagebytes_max$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa208_messagebytes_max",
        "()J",
        crypto_stream_salsa208_messagebytes_max$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa208_messagebytes_max$MH() { return crypto_stream_salsa208_messagebytes_max$MH_; }

    static final FunctionDescriptor crypto_stream_salsa208$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa208$FUNC() { return crypto_stream_salsa208$FUNC_; }

    static final MethodHandle crypto_stream_salsa208$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa208",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_stream_salsa208$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa208$MH() { return crypto_stream_salsa208$MH_; }

    static final FunctionDescriptor crypto_stream_salsa208_xor$FUNC_ = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_LONG_LONG,
        C_POINTER,
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa208_xor$FUNC() { return crypto_stream_salsa208_xor$FUNC_; }

    static final MethodHandle crypto_stream_salsa208_xor$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa208_xor",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        crypto_stream_salsa208_xor$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa208_xor$MH() { return crypto_stream_salsa208_xor$MH_; }

    static final FunctionDescriptor crypto_stream_salsa208_keygen$FUNC_ = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final jdk.incubator.foreign.FunctionDescriptor crypto_stream_salsa208_keygen$FUNC() { return crypto_stream_salsa208_keygen$FUNC_; }

    static final MethodHandle crypto_stream_salsa208_keygen$MH_ = RuntimeHelper.downcallHandle(
        LIBRARIES, "crypto_stream_salsa208_keygen",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        crypto_stream_salsa208_keygen$FUNC_, false
    );
    static final java.lang.invoke.MethodHandle crypto_stream_salsa208_keygen$MH() { return crypto_stream_salsa208_keygen$MH_; }

    static final long SODIUM_SIZE_MAX() { return -1L; }

    static final MemorySegment SODIUM_VERSION_STRING$SEGMENT_CONSTANT_ = CLinker.toCString("1.0.18");
    static final jdk.incubator.foreign.MemorySegment SODIUM_VERSION_STRING() { return SODIUM_VERSION_STRING$SEGMENT_CONSTANT_; }

    static final int crypto_aead_aes256gcm_KEYBYTES() { return (int)32L; }

    static final int crypto_aead_aes256gcm_NSECBYTES() { return (int)0L; }

    static final int crypto_aead_aes256gcm_NPUBBYTES() { return (int)12L; }

    static final int crypto_aead_aes256gcm_ABYTES() { return (int)16L; }

    static final long crypto_aead_aes256gcm_MESSAGEBYTES_MAX() { return 68719476704L; }

    static final int crypto_aead_chacha20poly1305_ietf_KEYBYTES() { return (int)32L; }

    static final int crypto_aead_chacha20poly1305_ietf_NSECBYTES() { return (int)0L; }

    static final int crypto_aead_chacha20poly1305_ietf_NPUBBYTES() { return (int)12L; }

    static final int crypto_aead_chacha20poly1305_ietf_ABYTES() { return (int)16L; }

    static final long crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX() { return 274877906880L; }

    static final int crypto_aead_chacha20poly1305_KEYBYTES() { return (int)32L; }

    static final int crypto_aead_chacha20poly1305_NSECBYTES() { return (int)0L; }

    static final int crypto_aead_chacha20poly1305_NPUBBYTES() { return (int)8L; }

    static final int crypto_aead_chacha20poly1305_ABYTES() { return (int)16L; }

    static final long crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_aead_chacha20poly1305_IETF_KEYBYTES() { return (int)32L; }

    static final int crypto_aead_chacha20poly1305_IETF_NSECBYTES() { return (int)0L; }

    static final int crypto_aead_chacha20poly1305_IETF_NPUBBYTES() { return (int)12L; }

    static final int crypto_aead_chacha20poly1305_IETF_ABYTES() { return (int)16L; }

    static final long crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX() { return 274877906880L; }

    static final int crypto_aead_xchacha20poly1305_ietf_KEYBYTES() { return (int)32L; }

    static final int crypto_aead_xchacha20poly1305_ietf_NSECBYTES() { return (int)0L; }

    static final int crypto_aead_xchacha20poly1305_ietf_NPUBBYTES() { return (int)24L; }

    static final int crypto_aead_xchacha20poly1305_ietf_ABYTES() { return (int)16L; }

    static final long crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_aead_xchacha20poly1305_IETF_KEYBYTES() { return (int)32L; }

    static final int crypto_aead_xchacha20poly1305_IETF_NSECBYTES() { return (int)0L; }

    static final int crypto_aead_xchacha20poly1305_IETF_NPUBBYTES() { return (int)24L; }

    static final int crypto_aead_xchacha20poly1305_IETF_ABYTES() { return (int)16L; }

    static final long crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_hash_sha512_BYTES() { return (int)64L; }

    static final int crypto_auth_hmacsha512_BYTES() { return (int)64L; }

    static final int crypto_auth_hmacsha512_KEYBYTES() { return (int)32L; }

    static final int crypto_auth_hmacsha512256_BYTES() { return (int)32L; }

    static final int crypto_auth_hmacsha512256_KEYBYTES() { return (int)32L; }

    static final int crypto_auth_BYTES() { return (int)32L; }

    static final int crypto_auth_KEYBYTES() { return (int)32L; }

    static final MemorySegment crypto_auth_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("hmacsha512256");
    static final jdk.incubator.foreign.MemorySegment crypto_auth_PRIMITIVE() { return crypto_auth_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_hash_sha256_BYTES() { return (int)32L; }

    static final int crypto_auth_hmacsha256_BYTES() { return (int)32L; }

    static final int crypto_auth_hmacsha256_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_xsalsa20_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_xsalsa20_NONCEBYTES() { return (int)24L; }

    static final long crypto_stream_xsalsa20_MESSAGEBYTES_MAX() { return -1L; }

    static final int crypto_box_curve25519xsalsa20poly1305_SEEDBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xsalsa20poly1305_NONCEBYTES() { return (int)24L; }

    static final int crypto_box_curve25519xsalsa20poly1305_MACBYTES() { return (int)16L; }

    static final long crypto_box_curve25519xsalsa20poly1305_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES() { return (int)16L; }

    static final int crypto_box_curve25519xsalsa20poly1305_ZEROBYTES() { return (int)32L; }

    static final int crypto_box_SEEDBYTES() { return (int)32L; }

    static final int crypto_box_PUBLICKEYBYTES() { return (int)32L; }

    static final int crypto_box_SECRETKEYBYTES() { return (int)32L; }

    static final int crypto_box_NONCEBYTES() { return (int)24L; }

    static final int crypto_box_MACBYTES() { return (int)16L; }

    static final long crypto_box_MESSAGEBYTES_MAX() { return -17L; }

    static final MemorySegment crypto_box_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("curve25519xsalsa20poly1305");
    static final jdk.incubator.foreign.MemorySegment crypto_box_PRIMITIVE() { return crypto_box_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_box_BEFORENMBYTES() { return (int)32L; }

    static final int crypto_box_SEALBYTES() { return (int)48L; }

    static final int crypto_box_ZEROBYTES() { return (int)32L; }

    static final int crypto_box_BOXZEROBYTES() { return (int)16L; }

    static final int crypto_core_hsalsa20_OUTPUTBYTES() { return (int)32L; }

    static final int crypto_core_hsalsa20_INPUTBYTES() { return (int)16L; }

    static final int crypto_core_hsalsa20_KEYBYTES() { return (int)32L; }

    static final int crypto_core_hsalsa20_CONSTBYTES() { return (int)16L; }

    static final int crypto_core_hchacha20_OUTPUTBYTES() { return (int)32L; }

    static final int crypto_core_hchacha20_INPUTBYTES() { return (int)16L; }

    static final int crypto_core_hchacha20_KEYBYTES() { return (int)32L; }

    static final int crypto_core_hchacha20_CONSTBYTES() { return (int)16L; }

    static final int crypto_core_salsa20_OUTPUTBYTES() { return (int)64L; }

    static final int crypto_core_salsa20_INPUTBYTES() { return (int)16L; }

    static final int crypto_core_salsa20_KEYBYTES() { return (int)32L; }

    static final int crypto_core_salsa20_CONSTBYTES() { return (int)16L; }

    static final int crypto_core_salsa2012_OUTPUTBYTES() { return (int)64L; }

    static final int crypto_core_salsa2012_INPUTBYTES() { return (int)16L; }

    static final int crypto_core_salsa2012_KEYBYTES() { return (int)32L; }

    static final int crypto_core_salsa2012_CONSTBYTES() { return (int)16L; }

    static final int crypto_core_salsa208_OUTPUTBYTES() { return (int)64L; }

    static final int crypto_core_salsa208_INPUTBYTES() { return (int)16L; }

    static final int crypto_core_salsa208_KEYBYTES() { return (int)32L; }

    static final int crypto_core_salsa208_CONSTBYTES() { return (int)16L; }

    static final int crypto_generichash_blake2b_BYTES_MIN() { return (int)16L; }

    static final int crypto_generichash_blake2b_BYTES_MAX() { return (int)64L; }

    static final int crypto_generichash_blake2b_BYTES() { return (int)32L; }

    static final int crypto_generichash_blake2b_KEYBYTES_MIN() { return (int)16L; }

    static final int crypto_generichash_blake2b_KEYBYTES_MAX() { return (int)64L; }

    static final int crypto_generichash_blake2b_KEYBYTES() { return (int)32L; }

    static final int crypto_generichash_blake2b_SALTBYTES() { return (int)16L; }

    static final int crypto_generichash_blake2b_PERSONALBYTES() { return (int)16L; }

    static final int crypto_generichash_BYTES_MIN() { return (int)16L; }

    static final int crypto_generichash_BYTES_MAX() { return (int)64L; }

    static final int crypto_generichash_BYTES() { return (int)32L; }

    static final int crypto_generichash_KEYBYTES_MIN() { return (int)16L; }

    static final int crypto_generichash_KEYBYTES_MAX() { return (int)64L; }

    static final int crypto_generichash_KEYBYTES() { return (int)32L; }

    static final MemorySegment crypto_generichash_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("blake2b");
    static final jdk.incubator.foreign.MemorySegment crypto_generichash_PRIMITIVE() { return crypto_generichash_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_hash_BYTES() { return (int)64L; }

    static final MemorySegment crypto_hash_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("sha512");
    static final jdk.incubator.foreign.MemorySegment crypto_hash_PRIMITIVE() { return crypto_hash_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_kdf_BYTES_MIN() { return (int)16L; }

    static final int crypto_kdf_BYTES_MAX() { return (int)64L; }

    static final int crypto_kdf_CONTEXTBYTES() { return (int)8L; }

    static final int crypto_kdf_KEYBYTES() { return (int)32L; }

    static final MemorySegment crypto_kdf_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("blake2b");
    static final jdk.incubator.foreign.MemorySegment crypto_kdf_PRIMITIVE() { return crypto_kdf_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final MemorySegment crypto_kx_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("x25519blake2b");
    static final jdk.incubator.foreign.MemorySegment crypto_kx_PRIMITIVE() { return crypto_kx_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_onetimeauth_poly1305_BYTES() { return (int)16L; }

    static final int crypto_onetimeauth_poly1305_KEYBYTES() { return (int)32L; }

    static final int crypto_onetimeauth_BYTES() { return (int)16L; }

    static final int crypto_onetimeauth_KEYBYTES() { return (int)32L; }

    static final MemorySegment crypto_onetimeauth_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("poly1305");
    static final jdk.incubator.foreign.MemorySegment crypto_onetimeauth_PRIMITIVE() { return crypto_onetimeauth_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_pwhash_argon2i_BYTES_MIN() { return (int)16L; }

    static final long crypto_pwhash_argon2i_BYTES_MAX() { return 4294967295L; }

    static final int crypto_pwhash_argon2i_PASSWD_MIN() { return (int)0L; }

    static final int crypto_pwhash_argon2i_PASSWD_MAX() { return (int)4294967295L; }

    static final int crypto_pwhash_argon2i_SALTBYTES() { return (int)16L; }

    static final int crypto_pwhash_argon2i_STRBYTES() { return (int)128L; }

    static final MemorySegment crypto_pwhash_argon2i_STRPREFIX$SEGMENT_CONSTANT_ = CLinker.toCString("$argon2i$");
    static final jdk.incubator.foreign.MemorySegment crypto_pwhash_argon2i_STRPREFIX() { return crypto_pwhash_argon2i_STRPREFIX$SEGMENT_CONSTANT_; }

    static final int crypto_pwhash_argon2i_OPSLIMIT_MIN() { return (int)3L; }

    static final int crypto_pwhash_argon2i_OPSLIMIT_MAX() { return (int)4294967295L; }

    static final int crypto_pwhash_argon2i_MEMLIMIT_MIN() { return (int)8192L; }

    static final long crypto_pwhash_argon2i_MEMLIMIT_MAX() { return 4398046510080L; }

    static final int crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE() { return (int)4L; }

    static final int crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE() { return (int)33554432L; }

    static final int crypto_pwhash_argon2i_OPSLIMIT_MODERATE() { return (int)6L; }

    static final int crypto_pwhash_argon2i_MEMLIMIT_MODERATE() { return (int)134217728L; }

    static final int crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE() { return (int)8L; }

    static final int crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE() { return (int)536870912L; }

    static final int crypto_pwhash_argon2id_BYTES_MIN() { return (int)16L; }

    static final long crypto_pwhash_argon2id_BYTES_MAX() { return 4294967295L; }

    static final int crypto_pwhash_argon2id_PASSWD_MIN() { return (int)0L; }

    static final int crypto_pwhash_argon2id_PASSWD_MAX() { return (int)4294967295L; }

    static final int crypto_pwhash_argon2id_SALTBYTES() { return (int)16L; }

    static final int crypto_pwhash_argon2id_STRBYTES() { return (int)128L; }

    static final MemorySegment crypto_pwhash_argon2id_STRPREFIX$SEGMENT_CONSTANT_ = CLinker.toCString("$argon2id$");
    static final jdk.incubator.foreign.MemorySegment crypto_pwhash_argon2id_STRPREFIX() { return crypto_pwhash_argon2id_STRPREFIX$SEGMENT_CONSTANT_; }

    static final int crypto_pwhash_argon2id_OPSLIMIT_MIN() { return (int)1L; }

    static final int crypto_pwhash_argon2id_OPSLIMIT_MAX() { return (int)4294967295L; }

    static final int crypto_pwhash_argon2id_MEMLIMIT_MIN() { return (int)8192L; }

    static final long crypto_pwhash_argon2id_MEMLIMIT_MAX() { return 4398046510080L; }

    static final int crypto_pwhash_argon2id_OPSLIMIT_INTERACTIVE() { return (int)2L; }

    static final int crypto_pwhash_argon2id_MEMLIMIT_INTERACTIVE() { return (int)67108864L; }

    static final int crypto_pwhash_argon2id_OPSLIMIT_MODERATE() { return (int)3L; }

    static final int crypto_pwhash_argon2id_MEMLIMIT_MODERATE() { return (int)268435456L; }

    static final int crypto_pwhash_argon2id_OPSLIMIT_SENSITIVE() { return (int)4L; }

    static final int crypto_pwhash_argon2id_MEMLIMIT_SENSITIVE() { return (int)1073741824L; }

    static final int crypto_pwhash_ALG_ARGON2I13() { return (int)1L; }

    static final int crypto_pwhash_ALG_ARGON2ID13() { return (int)2L; }

    static final int crypto_pwhash_ALG_DEFAULT() { return (int)2L; }

    static final int crypto_pwhash_BYTES_MIN() { return (int)16L; }

    static final long crypto_pwhash_BYTES_MAX() { return 4294967295L; }

    static final int crypto_pwhash_PASSWD_MIN() { return (int)0L; }

    static final int crypto_pwhash_PASSWD_MAX() { return (int)4294967295L; }

    static final int crypto_pwhash_SALTBYTES() { return (int)16L; }

    static final int crypto_pwhash_STRBYTES() { return (int)128L; }

    static final MemorySegment crypto_pwhash_STRPREFIX$SEGMENT_CONSTANT_ = CLinker.toCString("$argon2id$");
    static final jdk.incubator.foreign.MemorySegment crypto_pwhash_STRPREFIX() { return crypto_pwhash_STRPREFIX$SEGMENT_CONSTANT_; }

    static final int crypto_pwhash_OPSLIMIT_MIN() { return (int)1L; }

    static final int crypto_pwhash_OPSLIMIT_MAX() { return (int)4294967295L; }

    static final int crypto_pwhash_MEMLIMIT_MIN() { return (int)8192L; }

    static final long crypto_pwhash_MEMLIMIT_MAX() { return 4398046510080L; }

    static final int crypto_pwhash_OPSLIMIT_INTERACTIVE() { return (int)2L; }

    static final int crypto_pwhash_MEMLIMIT_INTERACTIVE() { return (int)67108864L; }

    static final int crypto_pwhash_OPSLIMIT_MODERATE() { return (int)3L; }

    static final int crypto_pwhash_MEMLIMIT_MODERATE() { return (int)268435456L; }

    static final int crypto_pwhash_OPSLIMIT_SENSITIVE() { return (int)4L; }

    static final int crypto_pwhash_MEMLIMIT_SENSITIVE() { return (int)1073741824L; }

    static final MemorySegment crypto_pwhash_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("argon2i");
    static final jdk.incubator.foreign.MemorySegment crypto_pwhash_PRIMITIVE() { return crypto_pwhash_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_scalarmult_curve25519_BYTES() { return (int)32L; }

    static final int crypto_scalarmult_curve25519_SCALARBYTES() { return (int)32L; }

    static final int crypto_scalarmult_BYTES() { return (int)32L; }

    static final int crypto_scalarmult_SCALARBYTES() { return (int)32L; }

    static final MemorySegment crypto_scalarmult_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("curve25519");
    static final jdk.incubator.foreign.MemorySegment crypto_scalarmult_PRIMITIVE() { return crypto_scalarmult_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_secretbox_xsalsa20poly1305_KEYBYTES() { return (int)32L; }

    static final int crypto_secretbox_xsalsa20poly1305_NONCEBYTES() { return (int)24L; }

    static final int crypto_secretbox_xsalsa20poly1305_MACBYTES() { return (int)16L; }

    static final long crypto_secretbox_xsalsa20poly1305_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES() { return (int)16L; }

    static final int crypto_secretbox_xsalsa20poly1305_ZEROBYTES() { return (int)32L; }

    static final int crypto_secretbox_KEYBYTES() { return (int)32L; }

    static final int crypto_secretbox_NONCEBYTES() { return (int)24L; }

    static final int crypto_secretbox_MACBYTES() { return (int)16L; }

    static final MemorySegment crypto_secretbox_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("xsalsa20poly1305");
    static final jdk.incubator.foreign.MemorySegment crypto_secretbox_PRIMITIVE() { return crypto_secretbox_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final long crypto_secretbox_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_secretbox_ZEROBYTES() { return (int)32L; }

    static final int crypto_secretbox_BOXZEROBYTES() { return (int)16L; }

    static final int crypto_stream_chacha20_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_chacha20_NONCEBYTES() { return (int)8L; }

    static final long crypto_stream_chacha20_MESSAGEBYTES_MAX() { return -1L; }

    static final int crypto_stream_chacha20_ietf_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_chacha20_ietf_NONCEBYTES() { return (int)12L; }

    static final long crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX() { return 274877906944L; }

    static final int crypto_stream_chacha20_IETF_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_chacha20_IETF_NONCEBYTES() { return (int)12L; }

    static final long crypto_stream_chacha20_IETF_MESSAGEBYTES_MAX() { return 274877906944L; }

    static final int crypto_secretstream_xchacha20poly1305_ABYTES() { return (int)17L; }

    static final int crypto_secretstream_xchacha20poly1305_HEADERBYTES() { return (int)24L; }

    static final int crypto_secretstream_xchacha20poly1305_KEYBYTES() { return (int)32L; }

    static final long crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX() { return 274877906816L; }

    static final int crypto_secretstream_xchacha20poly1305_TAG_FINAL() { return (int)3L; }

    static final int crypto_shorthash_siphash24_BYTES() { return (int)8L; }

    static final int crypto_shorthash_siphash24_KEYBYTES() { return (int)16L; }

    static final int crypto_shorthash_siphashx24_BYTES() { return (int)16L; }

    static final int crypto_shorthash_siphashx24_KEYBYTES() { return (int)16L; }

    static final int crypto_shorthash_BYTES() { return (int)8L; }

    static final int crypto_shorthash_KEYBYTES() { return (int)16L; }

    static final MemorySegment crypto_shorthash_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("siphash24");
    static final jdk.incubator.foreign.MemorySegment crypto_shorthash_PRIMITIVE() { return crypto_shorthash_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_sign_ed25519_BYTES() { return (int)64L; }

    static final int crypto_sign_ed25519_SEEDBYTES() { return (int)32L; }

    static final int crypto_sign_ed25519_PUBLICKEYBYTES() { return (int)32L; }

    static final int crypto_sign_ed25519_SECRETKEYBYTES() { return (int)64L; }

    static final long crypto_sign_ed25519_MESSAGEBYTES_MAX() { return -65L; }

    static final int crypto_sign_BYTES() { return (int)64L; }

    static final int crypto_sign_SEEDBYTES() { return (int)32L; }

    static final int crypto_sign_PUBLICKEYBYTES() { return (int)32L; }

    static final int crypto_sign_SECRETKEYBYTES() { return (int)64L; }

    static final long crypto_sign_MESSAGEBYTES_MAX() { return -65L; }

    static final MemorySegment crypto_sign_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("ed25519");
    static final jdk.incubator.foreign.MemorySegment crypto_sign_PRIMITIVE() { return crypto_sign_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_stream_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_NONCEBYTES() { return (int)24L; }

    static final long crypto_stream_MESSAGEBYTES_MAX() { return -1L; }

    static final MemorySegment crypto_stream_PRIMITIVE$SEGMENT_CONSTANT_ = CLinker.toCString("xsalsa20");
    static final jdk.incubator.foreign.MemorySegment crypto_stream_PRIMITIVE() { return crypto_stream_PRIMITIVE$SEGMENT_CONSTANT_; }

    static final int crypto_stream_salsa20_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_salsa20_NONCEBYTES() { return (int)8L; }

    static final long crypto_stream_salsa20_MESSAGEBYTES_MAX() { return -1L; }

    static final int crypto_verify_16_BYTES() { return (int)16L; }

    static final int crypto_verify_32_BYTES() { return (int)32L; }

    static final int crypto_verify_64_BYTES() { return (int)64L; }

    static final long randombytes_BYTES_MAX() { return 4294967295L; }

    static final int randombytes_SEEDBYTES() { return (int)32L; }

    static final int crypto_stream_xchacha20_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_xchacha20_NONCEBYTES() { return (int)24L; }

    static final long crypto_stream_xchacha20_MESSAGEBYTES_MAX() { return -1L; }

    static final int crypto_box_curve25519xchacha20poly1305_SEEDBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES() { return (int)32L; }

    static final int crypto_box_curve25519xchacha20poly1305_NONCEBYTES() { return (int)24L; }

    static final int crypto_box_curve25519xchacha20poly1305_MACBYTES() { return (int)16L; }

    static final long crypto_box_curve25519xchacha20poly1305_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_box_curve25519xchacha20poly1305_SEALBYTES() { return (int)48L; }

    static final int crypto_scalarmult_ed25519_BYTES() { return (int)32L; }

    static final int crypto_scalarmult_ed25519_SCALARBYTES() { return (int)32L; }

    static final int crypto_scalarmult_ristretto255_BYTES() { return (int)32L; }

    static final int crypto_scalarmult_ristretto255_SCALARBYTES() { return (int)32L; }

    static final int crypto_secretbox_xchacha20poly1305_KEYBYTES() { return (int)32L; }

    static final int crypto_secretbox_xchacha20poly1305_NONCEBYTES() { return (int)24L; }

    static final int crypto_secretbox_xchacha20poly1305_MACBYTES() { return (int)16L; }

    static final long crypto_secretbox_xchacha20poly1305_MESSAGEBYTES_MAX() { return -17L; }

    static final int crypto_pwhash_scryptsalsa208sha256_BYTES_MIN() { return (int)16L; }

    static final long crypto_pwhash_scryptsalsa208sha256_BYTES_MAX() { return 137438953440L; }

    static final int crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN() { return (int)0L; }

    static final long crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX() { return -1L; }

    static final int crypto_pwhash_scryptsalsa208sha256_SALTBYTES() { return (int)32L; }

    static final int crypto_pwhash_scryptsalsa208sha256_STRBYTES() { return (int)102L; }

    static final MemorySegment crypto_pwhash_scryptsalsa208sha256_STRPREFIX$SEGMENT_CONSTANT_ = CLinker.toCString("$7$");
    static final jdk.incubator.foreign.MemorySegment crypto_pwhash_scryptsalsa208sha256_STRPREFIX() { return crypto_pwhash_scryptsalsa208sha256_STRPREFIX$SEGMENT_CONSTANT_; }

    static final int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN() { return (int)32768L; }

    static final int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX() { return (int)4294967295L; }

    static final int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN() { return (int)16777216L; }

    static final long crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX() { return 68719476736L; }

    static final int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE() { return (int)524288L; }

    static final int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE() { return (int)16777216L; }

    static final int crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE() { return (int)33554432L; }

    static final int crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE() { return (int)1073741824L; }

    static final int crypto_stream_salsa2012_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_salsa2012_NONCEBYTES() { return (int)8L; }

    static final long crypto_stream_salsa2012_MESSAGEBYTES_MAX() { return -1L; }

    static final int crypto_stream_salsa208_KEYBYTES() { return (int)32L; }

    static final int crypto_stream_salsa208_NONCEBYTES() { return (int)8L; }

    static final long crypto_stream_salsa208_MESSAGEBYTES_MAX() { return -1L; }

}

